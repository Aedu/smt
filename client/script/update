#!/usr/bin/env perl
use strict;
use warnings;
use SMT::Agent::Utils;

sub jobhandler
{
  my ($jobtype, $jobid, $args, $verbose) =  @_;

  SMT::Agent::Utils::logger ("jobhandler for update called", $jobid);
  SMT::Agent::Utils::logger ("update runs jobid \"$jobid\"", $jobid);

  # check whether this handler can handle requested jobtype
  SMT::Agent::Utils::error ("wrong job handler: \"update\" cannot handle \"$jobtype\"", $jobid) if ( $jobtype ne "update" );

  my $xpQuery = XML::XPath->new(xml => $args);
  eval { SMT::Agent::Utils::error("no argument section found for this job", $jobid) unless ( $xpQuery->exists('/arguments[1]')); };
  my $argSet;
  eval { $argSet = $xpQuery->find('/arguments[1]') };
  SMT::Agent::Utils::error("xml data is not parsable", $jobid) if ($@);
  SMT::Agent::Utils::error("too many argument sections found for this job", $jobid) unless ( (defined $argSet) && ($argSet->size() == 1) );
  my $arg = $argSet->pop();

  my $agreelicenses = $arg->getAttribute('agreelicenses');

  my $agreeSet;
  eval { $agreeSet = $xpQuery->find('/arguments[1]/agreelicenses[1]') };
  SMT::Agent::Utils::error("xml data is not parsable", $jobid) if ($@);
  foreach my $_n ($agreeSet->get_nodelist()) {
      $agreelicenses = $_n->string_value() if (defined $_n);
      last if defined $agreelicenses;
  }
  $agreelicenses = (defined $agreelicenses && ($agreelicenses =~ /^1$/ || $agreelicenses =~ /^true$/)) ? 1 : 0;

  #==  run zypper ==
  my $command = "/usr/bin/zypper";
  my @cmdArgs;
  push (@cmdArgs, "--no-cd");               # ignore CD/DVD repositories
  push (@cmdArgs, "--non-interactive");     # don't ask user
  push (@cmdArgs, "up");                    # update
  push (@cmdArgs, "-l") if $agreelicenses;  # agree licenses

  (my $retval, my $stdout, my $stderr) = SMT::Agent::Utils::executeCommand ( $command, undef, @cmdArgs );

  # run zypper again if needed because of pkgmgr patches
  my $stdout2 = '';
  my $stderr2 = '';

  if ( $retval == 103 )
  {
      ($retval, $stdout2, $stderr2) = SMT::Agent::Utils::executeCommand ( $command, undef, @cmdArgs );
  }
  $stdout .= $stdout2;
  $stderr .= $stderr2;

  return (
    stdout => ((defined $stdout) && $verbose) ? $stdout : '',
    stderr => ((defined $stderr) && $verbose) ? $stderr : '',
    exitcode => $retval,
    success => ($retval == 0 ) ? "true" : "false",
    message => ($retval == 0 ) ? "update successfully finished" : "update failed"
  );

}

SMT::Agent::Utils::logger ("successfully loaded handler for jobtype \"update\"");

return 1;

