#!/usr/bin/env perl

###########################################################################
## Copyright (c) 2007 SUSE LINUX Products GmbH, Nuernberg, Germany.
###########################################################################

use SMT::Mirror::NU;
use SMT::Mirror::RpmMd;
use SMT::Utils;
use SMT::CLI;
use SMT::Parser::RegData;
use Config::IniFiles;
use File::Path;
use URI;
use Getopt::Long;
use File::Basename;

use Locale::gettext ();
use POSIX ();     # Needed for setlocale()

POSIX::setlocale(&POSIX::LC_MESSAGES, "");

#use Data::Dumper;

my $debug    = 0;
my $clean    = 0;
my $hardlink = 0;
my $deepverify = 0;
my $dryrun     = 0;

my $dbreplfile = undef;
my $dbreplacement = {};

my $LocalBasePath = "";

my $help     = 0;
my $logfile = "/dev/null";

my $result = GetOptions ("debug|d"     => \$debug,
                         "cleanup|c"   => \$clean,
                         "hardlink=i"  => \$hardlink,
                         "directory=s" => \$LocalBasePath,
                         "deepverify"  => \$deepverify,
                         "dryrun|n"    => \$dryrun,
                         "dbreplfile=s" => \$dbreplfile,
                         "logfile|L=s" => \$logfile,
                         "help|h"      => \$help
                        );


if($help)
{
    print basename($0) . " [--directory path] [--deepverify] [--dryrun] [--dbreplfile file] [-L file] [--debug]\n";
    print basename($0) . " --clean [--directory path] [--dbreplfile file] [-L file] [--debug]\n";
    print basename($0) . " --hardlink size [--directory path] [-L file] [--debug]\n";
    print "\n";
    print __("Options:\n");
    print "--debug -d        " . __("enable debug mode\n");
    print "--clean -c        " . __("cleanup all mirrored repositories.\n");
    print "                  " . __("Remove all files not longer mention in the metadata.\n");
    print "                  " . __("This mode do no mirror before cleanup.\n");
    print "--hardlink size   " . __("Search for duplicate files with size > 'size' (in Kilobytes) and create hardlinks\n");
    print "                  " . __("for them\n");
    print "--directory arg   " . __("The directory to work on. Using this option ignores the configured\n");
    print "                  " . __("default value in smt.conf\n");
    print "--deepverify      " . __("Verify all checksums \n");
    print "--dryrun -n       " . __("Run mirror algorithm without downloading the rpms. It shown only the names which would be downloaded \n");
    print "--dbreplfile arg  " . __("Path to XML file to use as database replacement. Such a file can be created with\n");
    print "                  " . __("the sync-ncc command. This option is only usefull if the smt database is not on the \n");
    print "                  " . __("same host as this script should run\n"); 
    print "--logfile -L file " . __("Path to logfile\n");
    exit 0;
}


# get a lock

if(!SMT::Utils::openLock("smt-mirror"))
{
    print __("Mirror process is still running.\n");
    exit 0;
}

# open the logfile

my $LOG = SMT::Utils::openLog($logfile);

my $cfg = undef;

eval
{
    $cfg = SMT::Utils::getSMTConfig();
};
if($@ || !defined $cfg)
{
    if(!SMT::Utils::unLock("smt-mirror"))
    {
        SMT::Utils::printLog($LOG, "error",  __("Cannot remove lockfile."));
    }
    SMT::Utils::printLog($LOG, "error", sprintf(__("Cannot read the SMT configuration file: %s"), $@));
    exit 1;
}

if(!defined $LocalBasePath || $LocalBasePath eq "" || !-d $LocalBasePath)
{
    $LocalBasePath = $cfg->val("LOCAL", "MirrorTo");
    if(!defined $LocalBasePath || $LocalBasePath eq "" || !-d $LocalBasePath)
    {
        if(!SMT::Utils::unLock("smt-mirror"))
        {
            SMT::Utils::printLog($LOG, "error", __("Cannot remove lockfile."));
        }
        SMT::Utils::printLog($LOG, "error", __("Cannot read the local base path"));
        exit 1;
    }
}

if($hardlink > 0)
{
    SMT::CLI::hardlink(log => $LOG, size => $hardlink, debug => $debug, basepath => $LocalBasePath);
    
    if(!SMT::Utils::unLock("smt-mirror"))
    {
        SMT::Utils::printLog($LOG, "error",  __("Cannot remove lockfile."));
    }
    exit 0;
}


my $dbh = undef;

if(!defined $dbreplfile)
{
    $dbh = SMT::Utils::db_connect();
    
    if(!$dbh)
    {
        if(!SMT::Utils::unLock("smt-mirror"))
        {
            SMT::Utils::printLog($LOG, "error",  __("Cannot remove lockfile."));
        }
        SMT::Utils::printLog($LOG, "error",  __("Cannot connect to database"));
        exit 1;
    }
}
else
{
    # add a parser
    $dbreplacement = {};
    
    my $parser = SMT::Parser::RegData->new();
    $parser->parse( $dbreplfile, sub { catalog_handler($dbreplacement, @_); });
}


#print Data::Dumper->Dump([$dbreplacement]);


my $NUUrl = $cfg->val("NU", "NUUrl");
if(!defined $NUUrl || $NUUrl eq "")
{
    if(!SMT::Utils::unLock("smt-mirror"))
    {
        SMT::Utils::printLog($LOG, "error", __("Cannot remove lockfile."));
    }
    SMT::Utils::printLog($LOG, "error", __("Cannot read NU Url"));
}

my $nuUser = $cfg->val("NU", "NUUser");
my $nuPass = $cfg->val("NU", "NUPass");

if(!defined $nuUser || $nuUser eq "" ||
   !defined $nuPass || $nuPass eq "")
{
    if(!SMT::Utils::unLock("smt-mirror"))
    {
        SMT::Utils::printLog($LOG, "error", __("Cannot remove lockfile."));
    }
    SMT::Utils::printLog($LOG, "error", __("Cannot read the Mirror Credentials"));
    exit 1;
}

my $uri = URI->new($NUUrl);
$uri->userinfo("$nuUser:$nuPass");


my $mirrorsrc = $cfg->val("LOCAL", "MirrorSRC");
if(defined $mirrorsrc && lc($mirrorsrc) eq "false")
{
    $mirrorsrc = 0;
}
else
{
    $mirrorsrc = 1;
}

my $hash = {};

if(!defined $dbreplfile)
{
    #
    # search for all zypp repositories we need to mirror and start the mirror process
    #
    $hash = $dbh->selectall_hashref( "select CATALOGID, LOCALPATH, EXTURL, CATALOGTYPE from Catalogs where CATALOGTYPE='zypp' and MIRRORABLE='Y' and DOMIRROR='Y'", "CATALOGID" );
}
else
{
    $hash = $dbreplacement;
}

foreach my $id (keys %{$hash})
{
    next if(!exists $hash->{$id}->{CATALOGTYPE} || ! defined $hash->{$id}->{CATALOGTYPE} ||
            lc($hash->{$id}->{CATALOGTYPE}) ne "zypp");
    
    if( $hash->{$id}->{EXTURL} ne "" && $hash->{$id}->{LOCALPATH} ne "" )
    {
        my $fullpath = $LocalBasePath."/repo/".$hash->{$id}->{LOCALPATH};
        &File::Path::mkpath( $fullpath );

        my $zyppMirror = SMT::Mirror::RpmMd->new(debug => $debug, log => $LOG, mirrorsrc => $mirrorsrc);
        if($clean)
        {
            $zyppMirror->clean( $fullpath );
        }
        else
        {
            $zyppMirror->uri( $hash->{$id}->{EXTURL} );
            $zyppMirror->deepverify($deepverify);
            $zyppMirror->mirrorTo( $fullpath, { urltree => 0, dryrun => $dryrun } );
        }
    }
}

#
# Now mirror the NU catalogs
#
my $mirror = SMT::Mirror::NU->new(debug => $debug, log => $LOG, mirrorsrc => $mirrorsrc);
$mirror->deepverify($deepverify);
if($clean)
{
    $mirror->clean( $LocalBasePath );
}
else
{
    if(defined $dbreplfile)
    {
        $mirror->dbreplacement($dbreplacement);
    }
    
    $mirror->uri( $uri->as_string );
    $mirror->mirrorTo( $LocalBasePath, { urltree => 0, dryrun => $dryrun } );
}

# search for Catalogs which has the DOMIRROR flag equals Y but the MIRRORABLE flag to N
if(!defined $dbreplfile)
{
    $hash = $dbh->selectall_hashref( "select CATALOGID, NAME, TARGET, CATALOGTYPE from Catalogs where MIRRORABLE='N' and DOMIRROR='Y'", "CATALOGID" );
    
    if(keys %{$hash} == 0)
    {
        if(!SMT::Utils::unLock("smt-mirror"))
        {
            SMT::Utils::printLog($LOG, "error", __("Cannot remove lockfile."));
            exit 1;
        }
        exit 0;
    }
    
    my $warning = __("WARNING: The following Catalogs cannot be mirrored.\n");
    $warning   .= __("         Maybe you have not enough permissions to download these Catalogs?\n\n");
    
    foreach my $id (keys %{$hash})
    {
        $warning .= "* ".$hash->{$id}->{NAME}." ".$hash->{$id}->{TARGET}."\n";
    }

    SMT::Utils::printLog($LOG, "info", $warning);
}

if(!SMT::Utils::unLock("smt-mirror"))
{
    SMT::Utils::printLog($LOG, "error", __("Cannot remove lockfile."));
    exit 1;
}

exit 0;

sub catalog_handler
{
    my $data = shift;
    my $node = shift;

    #print "called ".Data::Dumper->Dump([$node])."\n";

    if(defined $node && ref($node) eq "HASH" && 
       exists $node->{MAINELEMENT} && defined $node->{MAINELEMENT} &&
       lc($node->{MAINELEMENT}) eq "catalogs")
    {
        my $catname = $node->{NAME};
        if(exists $node->{TARGET} && defined $node->{TARGET} && $node->{TARGET} ne "")
        {
            $catname .= "-".$node->{TARGET};
        }
        #print "Build Catalogname $catname\n";        
        $data->{$catname} = $node;
    }        
}

#
# Manpage
#

=head1 NAME

smt mirror 

=head1 SYNOPSIS

smt [help|--help|-h] mirror

smt mirror [--directory path] [--deepverify] [--dryrun] [--dbreplfile file] [-L file] [--debug]

smt mirror --clean [--directory path] [--dbreplfile file] [-L file] [--debug]

smt mirror --hardlink size [--directory path] [-L file] [--debug]

=head1 DESCRIPTION

C<smt mirror> performs the mirroring procedure and downloads catalogs which are set to be mirrored.

If it is called with the B<--clean> parameter it searches inside of the mirrored catalogs for
obsolete files and remove them.

The B<--hardlink> paramter cause C<smt mirror> to search for files greater then I<size>. If it finds 
duplicate files it creates hardlinks instead of holding two copies of the same file.


=head1 OPTIONS

=head2 MIRROR

=over

=item --directory <path>

Defined the directory (B<path>) to work on. Using this option ignores the configured
default value in smt.conf

=item --deepverify

Before starting the mirror procedure verify checksums of B<all> files in the catalogs
and remove broken files. without this option only the metadata are verified.

=item --dryrun -n

Run mirror procedure without downloading the rpms. It shown only the names which would be downloaded.

=item --dbreplfile <file>

Path to XML file to use as database replacement. Such a file can be created with
the sync-ncc command. This option is only usefull if the smt database is not on the
same host as this script should run.

=item --logfile -L <file>

Write log messages to B<file>.

=item --debug -d

Enable debug mode.

=back

=head2 CLEAN

=over

=item --clean

Enable clean mode. With this parameter C<smt mirror> searches inside of the mirrored catalogs for
obsolete files and remove them. It does not mirror new files. 

=item --directory <path>

Defined the directory (B<path>) to work on. Using this option ignores the configured
default value in smt.conf

=item --dbreplfile <file>

Path to XML file to use as database replacement. Such a file can be created with
the sync-ncc command. This option is only usefull if the smt database is not on the
same host as this script should run.

=item --logfile -L <file>

Write log messages to B<file>.

=item --debug -d

Enable debug mode.

=back

=head2 HARDLINK

=over

=item --hardlink <size>

The B<--hardlink> paramter cause C<smt mirror> to search for files greater then I<size> (in kb).
If it finds duplicate files (equal in name, size and checksum), it creates hardlinks instead
of holding two copies of the same file.

=item --directory <path>

Defined the directory (B<path>) to work on. Using this option ignores the configured
default value in smt.conf

=item --logfile -L <file>

Write log messages to B<file>.

=item --debug -d

Enable debug mode.

=back

=head1 EXAMPLES

Start the mirror procedure with logging

 smt mirror --logfile /var/log/smt-mirror.log

run mirror with verifing all checksums and debug mode

 smt mirror -d --deepverify

clean the catalogs from files, which are no longer mentioned in the metadata

 smt mirror --clean 

create hardlinks for all duplicate files greater then 20000 kb

 smt mirror --hardlink 20000

=head1 AUTHORS and CONTRIBUTORS

Duncan Mac-Vicar Prett, Lukas Ocilka, Jens Daniel Schmidt, Michael Calmer

=head1 LICENSE

Copyright (c) 2008 SUSE LINUX Products GmbH, Nuernberg, Germany.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 675 Mass
Ave, Cambridge, MA 02139, USA.

=cut
