#!/usr/bin/perl -w

###########################################################################
## Copyright (c) 2007 SUSE LINUX Products GmbH, Nuernberg, Germany.
###########################################################################

BEGIN
{
    if(exists $ENV{https_proxy})
    {
        # required for Crypt::SSLeay HTTPS Proxy support
        $ENV{HTTPS_PROXY} = $ENV{https_proxy};
    }
    $ENV{HTTPS_CA_DIR} = "/etc/ssl/certs/";
    #$ENV{HTTPS_DEBUG} = 1;
}


use strict;
use SMT::Utils;
use SMT::NCCRegTools;
use Getopt::Long;
use LWP::UserAgent;
use Crypt::SSLeay;
#use XML::Writer;
use File::Basename;
use Data::Dumper;

use Locale::gettext ();
use POSIX ();     # Needed for setlocale()

POSIX::setlocale(&POSIX::LC_MESSAGES, "");


my $debug   = 0;
my $help    = 0;
my $random  = 0;
my $reseterror = 0;
my $logfile = "/dev/null";

my $result = GetOptions ("debug|d"     => \$debug,
                         "logfile|L=s" => \$logfile,
                         "randomStart|r" => \$random,
                         "reseterror"  => \$reseterror,
                         "help|h"      => \$help
                        );

if($help)
{
    print basename($0) . " [--reseterror] [--debug] [--logfile file]\n\n";
    print __("Register all clients at NCC which are currently not registered\n");
    print __("or which data changed since the last registration.\n");
    print "\n";
    print __("Options:\n");
    print "--reseterror      ".__("reset the NCC registration error flag and try to submit failed registrations again.\n");
    print "--debug -d        ".__("enable debug mode\n");
    print "--logfile -L file ".__("Path to logfile\n");
    exit 0;
}

my $useragent = SMT::Utils::createUserAgent(keep_alive => 1);
$useragent->protocols_allowed( [ 'https' ] );
$useragent->default_headers->push_header('Content-Type' => 'text/xml');

if(!SMT::Utils::openLock("smt-register"))
{
    print __("Registration process is still running.\n");
    exit 0;
}

# open the logfile

my $LOG = SMT::Utils::openLog($logfile);

# check if we are allowed to register clients at NCC

my $cfg = undef;

eval
{
    $cfg = SMT::Utils::getSMTConfig();
};
if($@ || !defined $cfg)
{
    if(!SMT::Utils::unLock("smt-register"))
    {
        SMT::Utils::printLog($LOG, "error",  __("Cannot remove lockfile."));
    }
    SMT::Utils::printLog($LOG, "error", sprintf(__("Cannot read the SMT configuration file: %s"), $@));
    exit 1;
}

my $allowRegister = $cfg->val("LOCAL", "forwardRegistration");
if(!(defined $allowRegister && $allowRegister eq "true"))
{
    if(!SMT::Utils::unLock("smt-register"))
    {
        SMT::Utils::printLog($LOG, "error",  __("Cannot remove lockfile."));
    }
    exit 0;
}
my $nccEmail = $cfg->val("LOCAL", "nccEmail");

my $sleeptime = 0;

$sleeptime = $cfg->val("LOCAL", "rndRegister", "0") if($random);

my $dbh = undef;

$dbh = SMT::Utils::db_connect();

if(!$dbh)
{
    if(!SMT::Utils::unLock("smt-register"))
    {
        SMT::Utils::printLog($LOG, "error", __("Cannot remove lockfile."));
    }
    SMT::Utils::printLog($LOG, "error", __("Cannot connect to database"));
    exit 1;
}

eval
{
    if($reseterror)
    {
        my $res = $dbh->do("Update Registration SET NCCREGERROR=0");
        SMT::Utils::printLog($LOG, "debug", "Reset NCC Registration Errors. Result: $res") if($debug);
    }
    
    my $nccreg = SMT::NCCRegTools->new(debug => $debug, useragent => $useragent, dbh => $dbh, 
                                       log => $LOG, nccemail => $nccEmail);
    my $err = $nccreg->NCCRegister($sleeptime);
    if($err != 0)
    {
        if(!SMT::Utils::unLock("smt-register"))
        {
            SMT::Utils::printLog($LOG, "error", __("Cannot remove lockfile."));
        }
        exit 1;
    }
};
if($@)
{
    if(!SMT::Utils::unLock("smt-register"))
    {
        SMT::Utils::printLog($LOG, "error", __("Cannot remove lockfile."));
    }
    exit 1;
}

if(!SMT::Utils::unLock("smt-register"))
{
    SMT::Utils::printLog($LOG, "error", __("Cannot remove lockfile."));
}
exit 0;


#
# Manpage
#

=head1 NAME

smt register 

=head1 SYNOPSIS

smt [help|--help|-h] register

smt register [--reseterror] [--debug] [--logfile file]

=head1 DESCRIPTION

smt register registers all clients at NCC which are currently not registered
or which data changed since the last registration. It skips all clients which
registration failed the last time unless the B<--reseterror> parameter is used.


=head1 OPTIONS

=over

=item --reseterror

Reset the error flags and register the clients again.

=item --debug

Enable debug mode.

=item --logfile -L  <file>

Write log messages to B<file>.

=item --help -h

Show a help message.

=back

=head1 EXAMPLES

Register all clients which are currently not registered or whose
registration data was updated since the last registration.

 smt register 

with writing to a logfile

 smt register --logfile /var/log/smt-register.log

enable debug mode

 smt register --debug

reset the error flag and register all clients which need a new registration

 smt register --reseterror -L /var/log/smt-register.log


=head1 AUTHORS and CONTRIBUTORS

Duncan Mac-Vicar Prett, Lukas Ocilka, Jens Daniel Schmidt, Michael Calmer

=head1 LICENSE

Copyright (c) 2008 SUSE LINUX Products GmbH, Nuernberg, Germany.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 675 Mass
Ave, Cambridge, MA 02139, USA.

=cut


