#!/usr/bin/perl -w

###########################################################################
## Copyright (c) 2007 SUSE LINUX Products GmbH, Nuernberg, Germany.
###########################################################################

BEGIN
{
    if(exists $ENV{https_proxy})
    {
        # required for Crypt::SSLeay HTTPS Proxy support
        $ENV{HTTPS_PROXY} = $ENV{https_proxy};
    }
}


use strict;
use SMT::Utils;
use SMT::NCCRegTools;
use Getopt::Long;
use LWP::UserAgent;
use Crypt::SSLeay;
#use XML::Writer;
use File::Basename;
use Data::Dumper;

use Locale::gettext ();
use POSIX ();     # Needed for setlocale()

POSIX::setlocale(&POSIX::LC_MESSAGES, "");


my $debug   = 0;
my $help    = 0;
my $random  = 0;
my $logfile = "/dev/null";

my $result = GetOptions ("debug|d"     => \$debug,
                         "logfile|L=s" => \$logfile,
                         "randomStart|r" => \$random,
                         "help|h"      => \$help
                        );

if($help)
{
    print basename($0) . __(" [OPTIONS]\n");
    print __("Register all clients at NCC which are currently not registered\n");
    print __("or which data changed since the last registration.\n");
    print "\n";
    print __("Options:\n");
    print "--debug -d        ".__("enable debug mode\n");
    print "--logfile -L file ".__("Path to logfile\n");
    print "--help -h         ".__("show this message\n");
    exit 0;
}


my $useragent = LWP::UserAgent->new(keep_alive => 1);
$useragent->protocols_allowed( [ 'https' ] );
$useragent->default_headers->push_header('Content-Type' => 'text/xml');
push @{ $useragent->requests_redirectable }, 'POST';

if(!SMT::Utils::openLock("smt-register"))
{
    print __("Registration process is still running.\n");
    exit 0;
}

# open the logfile

my $LOG = SMT::Utils::openLog($logfile);

# check if we are allowed to register clients at NCC

my $cfg = undef;

eval
{
    $cfg = SMT::Utils::getSMTConfig();
};
if($@ || !defined $cfg)
{
    if(!SMT::Utils::unLock("smt-register"))
    {
        SMT::Utils::printLog($LOG, "error",  __("Cannot remove lockfile."));
    }
    SMT::Utils::printLog($LOG, "error", sprintf(__("Cannot read the SMT configuration file: %s"), $@));
    exit 1;
}

my $allowRegister = $cfg->val("LOCAL", "forwardRegistration");
if(!(defined $allowRegister && $allowRegister eq "true"))
{
    if(!SMT::Utils::unLock("smt-register"))
    {
        SMT::Utils::printLog($LOG, "error",  __("Cannot remove lockfile."));
    }
    exit 0;
}
my $nccEmail = $cfg->val("LOCAL", "nccEmail");

my $sleeptime = 0;

$sleeptime = $cfg->val("LOCAL", "rndRegister", "0") if($random);

my $dbh = undef;

$dbh = SMT::Utils::db_connect();

if(!$dbh)
{
    if(!SMT::Utils::unLock("smt-register"))
    {
        SMT::Utils::printLog($LOG, "error", __("Cannot remove lockfile."));
    }
    SMT::Utils::printLog($LOG, "error", __("Cannot connect to database"));
    exit 1;
}

eval
{
    my $nccreg = SMT::NCCRegTools->new(debug => $debug, useragent => $useragent, dbh => $dbh, 
                                       log => $LOG, nccemail => $nccEmail);
    my $err = $nccreg->NCCRegister($sleeptime);
    if($err != 0)
    {
        if(!SMT::Utils::unLock("smt-register"))
        {
            SMT::Utils::printLog($LOG, "error", __("Cannot remove lockfile."));
        }
        exit 1;
    }
};
if($@)
{
    if(!SMT::Utils::unLock("smt-register"))
    {
        SMT::Utils::printLog($LOG, "error", __("Cannot remove lockfile."));
    }
    exit 1;
}

if(!SMT::Utils::unLock("smt-register"))
{
    SMT::Utils::printLog($LOG, "error", __("Cannot remove lockfile."));
}
exit 0;


#
# Manpage
#

=head1 NAME

smt register -  

=head1 SYNOPSIS

smt [help|--help|-h] register [options]

=head1 DESCRIPTION

smt register


=head1 OPTIONS

=head2 


=head1 AUTHORS and CONTRIBUTORS

Duncan Mac-Vicar Prett, Lukas Ocilka, Jens Daniel Schmidt, Michael Calmer

=head1 LICENSE

Copyright (c) 2008 SUSE LINUX Products GmbH, Nuernberg, Germany.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 675 Mass
Ave, Cambridge, MA 02139, USA.

=cut


