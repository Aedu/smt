#!/usr/bin/perl

use strict;
use warnings;
use lib ("/srv/www/perl-lib/");
use SMT::CLI;
use SMT::Utils;
use SMT::NCCRegTools;
use File::Basename;

use Locale::gettext ();
use POSIX ();     # Needed for setlocale()

POSIX::setlocale(&POSIX::LC_MESSAGES, "");

my $debug    = 0;
my $vblevel  = LOG_ERROR|LOG_WARN|LOG_INFO1;
my $help;
my $mail;    # activate sending of report mail
my $attach;  # attach csv report to report mail
my $quiet;   # suppress output to STDOUT
my $csv;     # export data as csv
my $file;    # write output to file
my $logfile;
my $nonccsync = 0;

# which reports
my $localreport = 0;
my $nccreport   = 0;


use Getopt::Long;

my $LOG = undef;

# configuration

my $legendLocal = "
Legend:

Subscription Type:       Group of Novell products which customer may be 
                         entitled to receive patches, updates or technical 
                         support during the period covered by the subscription.

Locally Registered       the registered machines connected to the SMT 
Systems:                 with access to patches, updates or technical 
                         support.

Active Purchase Count:   the number of active subscriptions not requiring
                         renewal in 30 days.

Soon expiring            active subscriptions requiring renewal in
Purchase Counts:         next 30 days.

Over Limit:              the registered machines not covered by
                         subscription, meaning the customer must purchase
                         additional subscriptions of the product.

Subscriptions:           Novell product which customer may be entitled to 
                         receive patches, updates or technical support 
                         during the period covered by the subscription.

Total Purchase Count:    the total number of subscriptions the customer
                         has purchased.

Used Locally:            the registered machines connected to the SMT 
                         with access to patches, updates or technical 
                         support.

Subscription Expires:    the ending date of subscription coverage.

 
1.  This report may not represent all of the SMT servers or machines in
    your environment.
2.  If Customer purchases Upgrade Protection, Customer must purchase
    Upgrade Protection for all copies of the Novell product(s) installed
    (per Novell Terms and Conditions of Suse Linux).
";

my $legendNCC   = "
Legend:

Subscription Type:       Group of Novell products which customer may be 
                         entitled to receive patches, updates or technical 
                         support during the period covered by the subscription.

Total Systems            the active number of machines registered
Registered with NCC:     by the customer at Novell Customer Center.

Active Purchase Count:   the number of active subscriptions not requiring
                         renewal in 30 days.

Soon expiring            active subscriptions requiring renewal in
Purchase Counts:         next 30 days.

Over Limit:              the registered machines not covered by
                         subscription, meaning the customer must purchase
                         additional subscriptions of the product.

Subscriptions:           Novell product which customer may be entitled to 
                         receive patches, updates or technical support 
                         during the period covered by the subscription.

Activation Code:         the key to validate the product on Novell Customer
                         Center.

Total Purchase Count:    the total number of subscriptions the customer
                         has purchased.

Total Used:              the number of machines registered to receive 
                         patches, updates, or technical support.

Used Locally:            the registered machines connected to the SMT 
                         with access to patches, updates or technical 
                         support.

Subscription Expires:    the ending date of subscription coverage.
 
1.  This report may not represent all of the SMT servers or machines in
    your environment.
2.  If Customer purchases Upgrade Protection, Customer must purchase
    Upgrade Protection for all copies of the Novell product(s) installed
    (per Novell Terms and Conditions of Suse Linux).
";

my $footer = "
DISCLAIMER:  The optional Subscription Management Tool (SMT) is intended to 
assist you in managing your active SUSE Linux Enterprise devices and allow you
to match them against the number of subscriptions you have purchased.  However,
the data generated by the SMT is for informational purposes only and should not
be relied upon as an accurate count of the number of purchased subscriptions
available or the number of subscriptions consumed by your Linux devices. In
particular, you should understand that when you run a copy of the SMT on
multiple servers that each copy of SMT may display the total number of 
subscriptions rather than only the number of subscriptions that pertain to the
relevant server.
";


# main hashes that keep the report data
my %REP = ();
my %DATA = ();

### SUBS #####################################################################

sub printUsage
{
    print basename($0) . " : " . __("generate a report")."\n";
    print "  --local        : " . __("force to create a report based on a local calculation")."\n";
    print "  --ncc          : " . __("force to create a report based on NCC data")."\n";
    print "  --nonccsync    : " . __("do not sync with NCC before creating the report")."\n";
    print "  --mail    (-m) : " . __("enable mailing of report")."\n";
    print "  --attach  (-a) : " . __("attach CSV report files to mail (only together with --mail)")."\n";
    print "  --quiet   (-q) : " . __("suppress output")."\n";
    print "  --csv     (-c) : " . __("export data in CSV format")."\n";
    print "  --file    (-F) [<file>] : " . __("write report to a file")."\n";
    print "            " . __("in csv mode <file> expands to [<dir>/]<file-name>-reportname[.<file-extension>]\n");
    print "  --logfile (-L) <file>   : " . __("Path to logfile")."\n";
    print "  --debug   (-d) : " . __("enable debug mode")."\n";
    print "  --verboselevel (-v) level " . __("set the verbose level\n");
}


#
# performs certificate checks and collects the errors found in a list
#      an error is a hash with the type name as key and the message as value
#      returns the error messages as text block
#
sub certificateCheck($$)
{
    my $printIt = shift;
    my $logIt = shift;
    if (!defined $printIt || !defined $logIt) { return ''; }
    my $messageBlock = '';

    my @msg = ();
    my $days = SMT::CLI::certificateExpireCheck(log => $LOG, vblevel => $vblevel);
    if(defined $days && $days > 0 && $days <= 10)
    {
        push @msg, { LOG_WARN => sprintf(__("WARNING: SMT server certificate expired in %s days. Please re-new it soon!"), $days ) };
    }
    elsif(defined $days && $days <= 0)
    {
        push @msg, { LOG_ERROR =>  __("ERROR: SMT server certificate is expired!") };
    }

    foreach my $message (@msg)
    {
        while (my ($type, $message) = each(%{$message}) )
        {
            printLog($LOG, $vblevel, $type, $message, $printIt, $logIt);
            $messageBlock .= $message."\n";
        }
    }

    return $messageBlock;
}


#
# will return rendered report and only (re)render if necessary
#   parameters: renderMode, reportName, [subReportName]
#
sub getReportRenderedAs
{
    my $mode   = shift;
    my $report = shift;
    my $subrep = shift;

    if ( ! defined $mode || ! defined $report ) { return ''; }
    if ( ! exists $DATA{$report} ) { return ''; }

    if (defined $subrep && $subrep ne '')
    {
        if (($subrep eq 'summary' && ref($DATA{$report}{$subrep}) ne "HASH") ||
            ($subrep eq 'alerts' && ref($DATA{$report}{$subrep}) ne "HASH"))
        {
            # do not render summaries
            return $DATA{$report}{$subrep};
        }

        # check if we need to (re)render
        if ( ! exists  $REP{$mode}{$report}{$subrep}  || 
             ! defined $REP{$mode}{$report}{$subrep}    )
        {
            $REP{$mode}{$report}{$subrep} = SMT::CLI::renderReport($DATA{$report}{$subrep}, $mode);
        }
        return $REP{$mode}{$report}{$subrep};
    }
    else
    {
        if ( ! exists  $REP{$mode}{$report}  || 
             ! defined $REP{$mode}{$report}    )
        {
            $REP{$mode}{$report} = SMT::CLI::renderReport($DATA{$report}, $mode);
        }
        return $REP{$mode}{$report};
    }
    # to be safe
    return '';
}


#
# assemble a merged report
#
sub getMergedReport($)
{
    my $renderMode = shift;
    if (! defined $renderMode) { return ''; }
    my %headings = (
                    'sub'     =>  __("Subscription Report based on NCC registrations"),
                    'prodsub' =>  __("Subscription Report based on a local calculation")
                   );

    my $res = '';
   
    if($localreport)
    {
        $res .= $headings{'prodsub'}."\n";
        $res .= sprintf '=' x length($headings{'prodsub'})."\n\n";
        $res .= getReportRenderedAs($renderMode, 'prodsub', 'alerts')."\n";
        $res .= getReportRenderedAs($renderMode, 'prodsub', 'summary')."\n";
        $res .= getReportRenderedAs($renderMode, 'prodsub', 'active')."\n";
        $res .= getReportRenderedAs($renderMode, 'prodsub', 'soon')."\n";
        $res .= getReportRenderedAs($renderMode, 'prodsub', 'expired')."\n";
        $res .= "\n\n"; 

        $res .= $legendLocal."\n\n";
    }
    
    if($nccreport)
    {
        $res .= $headings{'sub'}."\n";
        $res .= sprintf '=' x length($headings{'sub'})."\n\n";
        $res .= getReportRenderedAs($renderMode, 'sub', 'alerts')."\n";
        $res .= getReportRenderedAs($renderMode, 'sub', 'summary')."\n";
        $res .= getReportRenderedAs($renderMode, 'sub', 'active')."\n";
        $res .= getReportRenderedAs($renderMode, 'sub', 'soon')."\n";
        $res .= getReportRenderedAs($renderMode, 'sub', 'expired')."\n";
        $res .= "\n\n";

        $res .= $legendNCC."\n\n";
    }
    
    $res .= $footer."\n\n";

    return $res;
}


#
# return s hash with all reports rendered separately
#
sub getSeparateReports($)
{
    my $renderMode = shift;
    my %res = ();
    if (! defined $renderMode) { return %res; }

    if($localreport)
    {
        $res{'product_subscription_active'}     = getReportRenderedAs($renderMode, 'prodsub', 'active');
        $res{'product_subscription_expiresoon'} = getReportRenderedAs($renderMode, 'prodsub', 'soon');
        $res{'product_subscription_expired'}    = getReportRenderedAs($renderMode, 'prodsub', 'expired');
        $res{'product_subscription_summary'}    = getReportRenderedAs($renderMode, 'prodsub', 'summary');
        $res{'product_subscription_alerts'}      = getReportRenderedAs($renderMode, 'prodsub', 'alerts');
    }
    
    if($nccreport)
    {
        $res{'subscription_active'}     = getReportRenderedAs($renderMode, 'sub', 'active');
        $res{'subscription_expiresoon'} = getReportRenderedAs($renderMode, 'sub', 'soon');
        $res{'subscription_expired'}    = getReportRenderedAs($renderMode, 'sub', 'expired');
        $res{'subscription_summary'}    = getReportRenderedAs($renderMode, 'sub', 'summary');
        $res{'subscription_alerts'}      = getReportRenderedAs($renderMode, 'sub', 'alerts');
    }
    
    return %res;
}



### MAIN #####################################################################

&Getopt::Long::Configure( 'pass_through', 'no_autoabbrev');
&Getopt::Long::GetOptions(
                          'local'      => \$localreport,
                          'ncc'        => \$nccreport,
                          'nonccsync'  => \$nonccsync,
                          'debug|d'    => \$debug,
                          "verboselevel|v=i" => \$vblevel,
                          'help|h'     => \$help,
                          'mail|m'     => \$mail,
                          'attach|a'   => \$attach,
                          'quiet|q'    => \$quiet,
                          'csv|c'      => \$csv,
                          'file|F:s'   => \$file,      # file name is optional; if missing, it will use a default name 
                          'logfile|L=s'=> \$logfile
                         );

if ( defined $help && ( $help == 1 ) )
{
    printUsage();  
    exit 0;
}

$vblevel = LOG_ERROR|LOG_WARN|LOG_INFO1|LOG_INFO2|LOG_DEBUG|LOG_DEBUG2 if($debug);

# open the logfile
$LOG = SMT::Utils::openLog($logfile);


# sync current data from NCC
if(!$nonccsync)
{
    my $maxwait = 0;
    while(!SMT::Utils::openLock("smt-ncc-sync") && $maxwait <= 60 )
    {
        # wait for the lock
        $maxwait++;
        sleep 5;
    }

    if($maxwait > 60)
    {
        printLog($LOG, $vblevel, LOG_ERROR, __("Cannot create lockfile. Skip syncing current data from NCC"));
    }
    elsif($maxwait == 0)
    {
        # start sync
        my $lr= SMT::NCCRegTools->new(vblevel => $vblevel,
                                      log     => $LOG);
        
        printLog($LOG, $vblevel, LOG_INFO1, __("Downloading Subscription information"));
        my $res = $lr->NCCListSubscriptions();
        if ($res)
        {
            SMT::Utils::printLog($LOG, $vblevel, LOG_ERROR, __("Error while fetching Subscription data."));
        }
        
        printLog($LOG, $vblevel, LOG_INFO1, __("Downloading Registration information"));
        $res = $lr->NCCListRegistrations();
        if ($res)
        {
            SMT::Utils::printLog($LOG, $vblevel, LOG_ERROR, __("Error while fetching Registration data."));
        }

    }
    # else $maxwait > 0 and <=60 means ncc-sync was running. we do not need to sync again.

    SMT::Utils::unLock("smt-ncc-sync");
}


if(!($localreport || $nccreport))
{
    # calculate best report
    my $cfg = SMT::Utils::getSMTConfig();
    
    my $fwdr = $cfg->val("LOCAL", "forwardRegistration");
    if(lc($fwdr) eq "true")
    {
        $nccreport = 1;
    }
    else
    {
        $localreport = 1;
    }
}

{
    my $hostname = `/bin/hostname -f 2>/dev/null`;
    $hostname = "unknown" if(!defined $hostname || $hostname eq "");
    chomp($hostname);
    
    my ($uri, $NUUser, $NUPass) = SMT::Utils::getLocalRegInfos();
    my $smtguid = SMT::Utils::getSMTGuid();
    
    $footer      .= "
Generated on: $hostname
Site ID:      $NUUser
SMT ID:       $smtguid
";
}


if($localreport)
{
    $DATA {'prodsub'} = SMT::CLI::productSubscriptionReport(log => $LOG, vblevel => $vblevel);
}

if( $nccreport )
{
    $DATA {'sub'}     = SMT::CLI::subscriptionReport(log => $LOG, vblevel => $vblevel);
}


# default settings
my $doPrint = 1;
my $doLog = 1; 
my $certErrors = '';
my $datestring = POSIX::strftime("%Y-%m-%d_%H-%M-%S", localtime);
my $defaultFilePrefix = "SMT_report-$datestring";


# set doPrint to 0 if quiet mode selected
if (defined $quiet && $quiet == 1)
{
    $doPrint = 0;
}

# print and log the ascii report if wanted
printLog($LOG, $vblevel, LOG_INFO1, getMergedReport('asciitable'), $doPrint, $doLog);

# print, log and get the certificate check results
$certErrors = certificateCheck($doPrint, $doLog);


if (defined $file)
{
    # exporting the report
    my $fname = '';
    my ($Efile, $Edir, $Eext) = fileparse($file, qr/\.[^.]*/);

    if ($Efile eq '')
    {
        $Efile = $defaultFilePrefix; 
        $Eext  = '';  # trigger automatic extension
    }

    # if file extension is csv we switch to csv export
    if ( (defined $csv && $csv == 1) ||  $Eext eq '.csv' )
    {
        $csv = 1;
    }

    if ($csv)
    {
        if ($Eext eq '') { $Eext = '.csv'; }

        my %rep = getSeparateReports('csv');

        while ( my ($rname, $rdata) = each(%rep) )
        {
            my $extension = $Eext;
            if ($extension eq '.csv'  &&  $rname =~ /alerts/i ) { $extension = '.txt';  }
            $fname = $Edir.$Efile.'-'.$rname.$extension;
            open(REPFILE, "> $fname ")  ||  die sprintf(__("Can not open target file %s"), $fname);
            print REPFILE $rdata;
            close REPFILE;
        }
    }
    else
    {
        $fname = $fname = $Edir.$Efile.$Eext;
        open(REPFILE, "> $fname")  ||  die sprintf(__("Can not open target file %s"), $fname);
        print REPFILE getMergedReport('asciitable');
        close REPFILE;
    }

    if ($certErrors ne '')
    {
        $fname = $Edir.$Efile.'-certificatecheck.txt';
        open(ERRFILE, "> $fname");
        print ERRFILE $certErrors;
        close ERRFILE;
    }
}



if (defined $mail  &&  $mail == 1)
{
    my %ATTACH = ();

    if (defined $attach  &&  $attach == 1)
    {
        my %rep = getSeparateReports('csv');

        while ( my ($rname, $rdata) = each(%rep) )
        {
            my $extension = '.csv';
            if ( $rname =~ /alerts/i ) { $extension = '.txt';  }
            my $csvName = $defaultFilePrefix.'-'.$rname.$extension;
            $ATTACH{$csvName} = $rdata;
        }

        if (defined $certErrors  &&  $certErrors ne '')
        {
            $ATTACH{"$defaultFilePrefix-certificatecheck .txt"} = $certErrors; 
        }
    }

    my $MailBody = '';
    if ($certErrors ne '') { $MailBody .= $certErrors."\n\n"; }
    $MailBody .= getMergedReport('asciitable');

    my $datestring = POSIX::strftime("%Y-%m-%d %H:%M", localtime);
    my $subject = "SMT Report $datestring";
    SMT::Utils::sendMailToAdmins($subject, $MailBody, \%ATTACH);
}

exit 0;

#
# Manpage
#

=head1 NAME

smt report

=head1 SYNOPSIS

smt [help|--help|-h] report

smt report [--mail|-m] [--attach|-a] [--quiet|-q] [--csv|-c] [--file|-F [file]] [--logfile|-L file] [--debug|-d]

smt report [--local] [--ncc] [--nonccsync]

=head1 DESCRIPTION

I<smt report> creates reports on SMT and NCC data. Reports of the kinds local report and ncc report can be created.
The reports can be printed to STDOUT, exported to one or multiple files as well as mailed to the administrator(s).

The kind of the report is computed automatically based on your SMT setup but can as well be defined by parameters.
Using the parameter B<--local> will force a report based on local data whereas B<--ncc> will force a report based on NCC data. These parameters can be used in combination and do not exclude each other.


=head1 OPTIONS

=head2 REPORT TYPES

=over

=item --local

Enforces the creation of a report based on local data.

=item --ncc

Enforces the creation of a report based on NCC data.

=item --nonccsync

Prevents the report module from syncing the data with NCC when creating the report. This can be used in combination with B<--local> or B<--ncc>.

=back

=head2 OUTPUT FORMAT and TARGET

=over

=item --quiet|-q

Creates a report in quiet mode which supresses any output to STDOUT. No report will be printed to STDOUT.

=item --file|-F [file]

Writes the report to a file (or files). By default the report will be written to a single file rendered as tables. In csv mode (see B<--csv> section) each report will be written to its own file in csv format.

The B<file> name is optional and may as well define a path where to create the report file(s). If no file name is specified a default will be used which contains a timestamp. It will however not be checked if the file(s) already exist(s).

In csv mode the file name will expand to [path/]B<filename->I<reportname>[.extension] for every report.

B<Note:> If the file name contains I<.csv> as extension the report format will be csv (same as using B<--csv>).


=item --csv|-c

Export the report data in csv format to multiple files. Only to be used with B<--file> (see B<--file> section).
The first line of each csv file consists of the column names, data starts on line two.

=item --mail|-m

Activate mailing of the report. The report will be mailed rendered as table to the address(es) defined via the SMT YaST module.
The recipient list and optional mail relay settings can be setup in the I<REPORT> section in B</etc/smt.conf>.

=item --attach|-a

Reports rendered in csv format will be attached to the mailing. The files that would be created using B<--file ./ --csv> will be attached to the mail. Only to be used with B<--mail>.

=back

=head2 DEBUG

=over

=item --debug|-d

Enable debug mode for verbose logging.

=item --logfile|-L file

Write log messages to B<file>.

=back


=head1 EXAMPLES

Print all reports to STDOUT

 smt report --local --ncc

Only mail the default report to the administrator(s) and suppress console output

 smt report --mail --quiet

Export all reports as separate files in B<csv> format to B<./reports/>

 smt report --local --ncc --file ./reports/ --csv

Mail all reports including csv attachments to the administrators and suppress console output (convenient for a cron job)

 smt report --local --ncc --mail --attach --quiet

Start the report procedure with logging

 smt report --logfile /var/log/smt-report.log


=head1 AUTHORS and CONTRIBUTORS

Duncan Mac-Vicar Prett, Lukas Ocilka, Jens Daniel Schmidt, Michael Calmer

=head1 LICENSE

Copyright (c) 2008 SUSE LINUX Products GmbH, Nuernberg, Germany.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 675 Mass
Ave, Cambridge, MA 02139, USA.

=cut
