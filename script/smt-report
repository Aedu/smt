#!/usr/bin/perl

use strict;
use warnings;
use lib ("/srv/www/perl-lib/");
use SMT::CLI;
use SMT::Utils;
use File::Basename;

use Locale::gettext ();
use POSIX ();     # Needed for setlocale()

POSIX::setlocale(&POSIX::LC_MESSAGES, "");

my $debug;
my $help;
my $mail;    # activate sending of report mail
my $quiet;   # suppress output to STDOUT
my $export;  # export data as csv, to write to a file use $file
my $file;    # write output to file
my $logfile;

use Getopt::Long;
&Getopt::Long::Configure( 'pass_through', 'no_autoabbrev');
&Getopt::Long::GetOptions(
         'debug|d'    => \$debug,
         'help|h'     => \$help,
         'mail|m'     => \$mail,
         'quiet|q'    => \$quiet,
         'export|e'   => \$quiet,
         'file|F=s'   => \$file, 
         'logfile|L=s'=> \$logfile
);

if ( defined $help && ( $help == 1 ) )
{
  print basename($0) . " : " . __("generate a report\n");
  print "  --help    (-h) : " . __("print this help\n");
  print "  --debug   (-d) : " . __("enable debug mode\n");
  print "  --mail    (-m) : " . __("enable mailing of report\n");
  print "  --quiet   (-q) : " . __("suppress output\n");
  print "  --export  (-e) : " . __("export data in CSV format\n");
  print "  --file    (-F) <file> : " . __("write output to file <file>\n");
  print "  --logfile (-L) <file> : " . __("Path to logfile\n");
  exit 0;
}

my %conf = (
            SUSE         => { 
                             NAME => "openSUSE",
                             ARCHGROUPS => {}
                            },
            SLES         => {
                             NAME => "SUSE Linux Enterprise Server",
                             ARCHGROUPS => {
                                            "x86/x86_64" => ['i386', 'i486', 'i586', 'i686', 'x86_64'],
                                            "ppc"        => ['ppc', 'ppc64'],
                                            "s390"       => ['s390', 's390x'],
                                            "ia64"       => ['ia64'],
                                            "unknown"    => [undef]
                                           }
                            },
            SLED         => {
                             NAME => "SUSE Linux Enterprise Desktop",
                             ARCHGROUPS => {}
                            },
            ZlmSatellite => {
                             NAME => "Zenworks Linux Management",
                             ARCHGROUPS => {}
                            },
            SDK          => {
                             NAME => "SUSE Linux Enterprise Software Development Kit",
                             ARCHGROUPS => {}
                            },
            SLERT        => {
                             NAME => "SUSE Linux Enterprise Server RT Solution",
                             ARCHGROUPS => {}
                            },
            OES          => {
                             NAME => "Novell Open Enterprise Server",
                             ARCHGROUPS => {}
                            },
            VMDP         => {
                             NAME => "SUSE Linux Enterprise Virtual Machine Driver Pack",
                             ARCHGROUPS => {}
                            },
            Pulsar       => {
                             NAME => "ZENworks Pulsar",
                             ARCHGROUPS => {}
                            },
            "SLES-HA"    => {
                             NAME => "SUSE Linux Enterprise HA Server",
                             ARCHGROUPS => {}
                            },
            ZOS          => {
                             NAME => "ZENworks Orchestrator",
                             ARCHGROUPS => {}
                            },
            SLEDC        => {
                             NAME => "SUSE Linux Enterprise Data Center",
                             ARCHGROUPS => {
                                            "x86/x86_64" => ['i386', 'i486', 'i586', 'i686', 'x86_64'],
                                            "ppc"        => ['ppc', 'ppc64'],
                                            "s390"       => ['s390', 's390x'],
                                            "ia64"       => ['ia64'],
                                            "unknown"    => [undef]
                                           }
                            },
            SMT_DEFAULT  => {
                             NAME => undef,
                             ARCHGROUPS => {
                                            "x86/x86_64" => ['i386', 'i486', 'i586', 'i686', 'x86_64'],
                                            "ppc"        => ['ppc', 'ppc64'],
                                            "s390"       => ['s390', 's390x'],
                                            "ia64"       => ['ia64'],
                                            "unknown"    => [undef]
                                           }
                            }
           );

# open the logfile

my $LOG = SMT::Utils::openLog($logfile);

## FIXME  this is just a hack to keep this function working
##        the functions called have been changed
##        the handling here will be cleaned up very soon - please do not mess up my mess :)

my $renderMode = 'asciitable';

my $classReport = '';
my $classReportHash = SMT::CLI::productClassReport(conf => \%conf, log => $LOG, debug => $debug);
if(!defined $classReportHash)
{
    exit 1;
}
#$classReport .= "-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-\n";
$classReport .= SMT::CLI::renderReport($classReportHash, $renderMode); 
#$classReport .= "-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-\n";




my $prodSubReport = '';
my $prodSubReportHash = SMT::CLI::productSubscriptionReport(log => $LOG, debug => $debug);
if(!defined $prodSubReportHash)
{
    exit 1;
}

#$prodSubReport .= "=========================================================================\n"; 
$prodSubReport .= SMT::CLI::renderReport(${$prodSubReportHash}{'active'}, $renderMode)."\n";
$prodSubReport .= SMT::CLI::renderReport(${$prodSubReportHash}{'soon'}, $renderMode)."\n";
$prodSubReport .= SMT::CLI::renderReport(${$prodSubReportHash}{'expired'}, $renderMode)."\n";
$prodSubReport .= ${$prodSubReportHash}{'summary'}."\n";
#$prodSubReport .= "=========================================================================\n"; 



my $subReport = '';
my $subReportHash = SMT::CLI::subscriptionReport(log => $LOG, debug => $debug);
if(!defined $subReportHash)
{
    exit 1;
}

#$subReport .= "#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#\n"; 
$subReport .= SMT::CLI::renderReport(${$subReportHash}{'active'}, $renderMode)."\n";
$subReport .= SMT::CLI::renderReport(${$subReportHash}{'soon'}, $renderMode)."\n";
$subReport .= SMT::CLI::renderReport(${$subReportHash}{'expired'}, $renderMode)."\n";
$subReport .= ${$subReportHash}{'summary'}."\n";
#$subReport .= "#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#\n"; 



#printLog($LOG, "info", "Example", doPrint, doLog);

printLog($LOG, "info", __("Product Class Report"));
printLog($LOG, "info", "====================\n");
printLog($LOG, "info", $classReport."\n");

printLog($LOG, "info", __("Subscription Report based on a local calculation"));
printLog($LOG, "info", "================================================\n");
printLog($LOG, "info", $prodSubReport."\n");

printLog($LOG, "info", __("Subscription Report based on NCC registrations"));
printLog($LOG, "info",  "==============================================\n");
printLog($LOG, "info", $subReport."\n");

my $days = SMT::CLI::certificateExpireCheck(log => $LOG, debug => $debug);
if(defined $days && $days > 0 && $days <= 10)
{
    printLog($LOG, "warn", sprintf(__("WARNING: SMT server certificate expired in %s days. Please re-new it soon!"), $days));
}
elsif(defined $days && $days <= 0)
{
    printLog($LOG, "error", __("ERROR: SMT server certificate is expired!"));
}

exit 0;
