#!/usr/bin/perl

use strict;
use warnings;
use lib ("/srv/www/perl-lib/");
use SMT::CLI;
use SMT::Utils;
use File::Basename;

use Locale::gettext ();
use POSIX ();     # Needed for setlocale()

POSIX::setlocale(&POSIX::LC_MESSAGES, "");

my $debug;
my $help;
my $mail;    # activate sending of report mail
my $attach;  # attach csv report to report mail
my $quiet;   # suppress output to STDOUT
my $csv;     # export data as csv
my $file;    # write output to file
my $logfile;

use Getopt::Long;

# open the logfile
my $LOG = SMT::Utils::openLog($logfile);


## FIXME  support for mailing is still missing


# configuration
my %conf = (
            SUSE         => { 
                             NAME => "openSUSE",
                             ARCHGROUPS => {}
                            },
            SLES         => {
                             NAME => "SUSE Linux Enterprise Server",
                             ARCHGROUPS => {
                                            "x86/x86_64" => ['i386', 'i486', 'i586', 'i686', 'x86_64'],
                                            "ppc"        => ['ppc', 'ppc64'],
                                            "s390"       => ['s390', 's390x'],
                                            "ia64"       => ['ia64'],
                                            "unknown"    => [undef]
                                           }
                            },
            SLED         => {
                             NAME => "SUSE Linux Enterprise Desktop",
                             ARCHGROUPS => {}
                            },
            ZlmSatellite => {
                             NAME => "Zenworks Linux Management",
                             ARCHGROUPS => {}
                            },
            SDK          => {
                             NAME => "SUSE Linux Enterprise Software Development Kit",
                             ARCHGROUPS => {}
                            },
            SLERT        => {
                             NAME => "SUSE Linux Enterprise Server RT Solution",
                             ARCHGROUPS => {}
                            },
            OES          => {
                             NAME => "Novell Open Enterprise Server",
                             ARCHGROUPS => {}
                            },
            VMDP         => {
                             NAME => "SUSE Linux Enterprise Virtual Machine Driver Pack",
                             ARCHGROUPS => {}
                            },
            Pulsar       => {
                             NAME => "ZENworks Pulsar",
                             ARCHGROUPS => {}
                            },
            "SLES-HA"    => {
                             NAME => "SUSE Linux Enterprise HA Server",
                             ARCHGROUPS => {}
                            },
            ZOS          => {
                             NAME => "ZENworks Orchestrator",
                             ARCHGROUPS => {}
                            },
            SLEDC        => {
                             NAME => "SUSE Linux Enterprise Data Center",
                             ARCHGROUPS => {
                                            "x86/x86_64" => ['i386', 'i486', 'i586', 'i686', 'x86_64'],
                                            "ppc"        => ['ppc', 'ppc64'],
                                            "s390"       => ['s390', 's390x'],
                                            "ia64"       => ['ia64'],
                                            "unknown"    => [undef]
                                           }
                            },
            SMT_DEFAULT  => {
                             NAME => undef,
                             ARCHGROUPS => {
                                            "x86/x86_64" => ['i386', 'i486', 'i586', 'i686', 'x86_64'],
                                            "ppc"        => ['ppc', 'ppc64'],
                                            "s390"       => ['s390', 's390x'],
                                            "ia64"       => ['ia64'],
                                            "unknown"    => [undef]
                                           }
                            }
           );



# main hashes that keep the report data
my %REP = ();
my %DATA = (
            'class'   => SMT::CLI::productClassReport(conf => \%conf, log => $LOG, debug => $debug),
            'prodsub' => SMT::CLI::productSubscriptionReport(log => $LOG, debug => $debug),
            'sub'     => SMT::CLI::subscriptionReport(log => $LOG, debug => $debug)
          );


### SUBS #####################################################################

sub printUsage
{
    print basename($0) . " : " . __("generate a report\n");
    print "  --help    (-h) : " . __("print this help\n");
    print "  --debug   (-d) : " . __("enable debug mode\n");
    print "  --mail    (-m) : " . __("enable mailing of report\n");
    print "  --attach (-a) : " . __("attach CSV report files to mail (only together with --mail)\n");
    print "  --quiet   (-q) : " . __("suppress output\n");
    print "  --csv     (-c) : " . __("export data in CSV format\n");
    print "  --file    (-F) [<dir>] : " . __("write export files to <dir>\n");
    print "  --logfile (-L) <file>     : " . __("Path to logfile\n");
}


sub certificateCheck
{
    my %ret = ();
    my $days = SMT::CLI::certificateExpireCheck(log => $LOG, debug => $debug);
    if(defined $days && $days > 0 && $days <= 10)
    {
        #printLog($LOG, "warn", sprintf(__("WARNING: SMT server certificate expired in %s days. Please re-new it soon!"), $days));
        %ret = ( 'warn' => sprintf(__("WARNING: SMT server certificate expired in %s days. Please re-new it soon!"), $days ) );
    }
    elsif(defined $days && $days <= 0)
    {
        #printLog($LOG, "error", __("ERROR: SMT server certificate is expired!"));
        %ret = ( 'error' =>  __("ERROR: SMT server certificate is expired!") );
    }
    return %ret;
}


#
# will return rendered report and only (re)render if necessary
#   parameters: renderMode, reportName, [subReportName]
#
sub getReportRenderedAs
{
    my $mode   = shift;
    my $report = shift;
    my $subrep = shift;

    if ( ! defined $mode || ! defined $report ) { return ''; }
    if ( ! exists $DATA{$report} ) { return ''; }

    if (defined $subrep && $subrep ne '')
    {
        if ($subrep eq 'summary')
        {
            # do not render summaries
            return $DATA{$report}{$subrep};
        }

        # check if we need to (re)render
        if ( ! exists  $REP{$mode}{$report}{$subrep}  || 
             ! defined $REP{$mode}{$report}{$subrep}    )
        {
            $REP{$mode}{$report}{$subrep} = SMT::CLI::renderReport($DATA{$report}{$subrep}, $mode);
        }
        return $REP{$mode}{$report}{$subrep};
    }
    else
    {
        if ( ! exists  $REP{$mode}{$report}  || 
             ! defined $REP{$mode}{$report}    )
        {
            $REP{$mode}{$report} = SMT::CLI::renderReport($DATA{$report}, $mode);
        }
        return $REP{$mode}{$report};
    }
    # to be safe
    return '';
}


### MAIN #####################################################################

&Getopt::Long::Configure( 'pass_through', 'no_autoabbrev');
&Getopt::Long::GetOptions(
         'debug|d'    => \$debug,
         'help|h'     => \$help,
         'mail|m'     => \$mail,
         'attach|a'   => \$attach,
         'quiet|q'    => \$quiet,
         'csv|c'      => \$csv,
         'file|F=s'   => \$file, 
         'logfile|L=s'=> \$logfile
);


if ( defined $help && ( $help == 1 ) )
{
    printUsage();  
    exit 0;
}


# FIXME  for now static configuration to remain functioning
#        will be configurable via parameters soon
my $renderMode = 'asciitable';

my $classReport = getReportRenderedAs($renderMode, 'class');

my $prodSubReport = '';
$prodSubReport   .= getReportRenderedAs($renderMode, 'prodsub', 'active')."\n";
$prodSubReport   .= getReportRenderedAs($renderMode, 'prodsub', 'soon')."\n";
$prodSubReport   .= getReportRenderedAs($renderMode, 'prodsub', 'expired')."\n";
$prodSubReport   .= getReportRenderedAs($renderMode, 'prodsub', 'summary')."\n";

my $subReport = '';
$subReport   .= getReportRenderedAs($renderMode, 'sub', 'active')."\n";
$subReport   .= getReportRenderedAs($renderMode, 'sub', 'soon')."\n";
$subReport   .= getReportRenderedAs($renderMode, 'sub', 'expired')."\n";
$subReport   .= getReportRenderedAs($renderMode, 'sub', 'summary')."\n";



printLog($LOG, "info", __("Product Class Report"));
printLog($LOG, "info", "====================\n");
printLog($LOG, "info", $classReport."\n");

printLog($LOG, "info", __("Subscription Report based on a local calculation"));
printLog($LOG, "info", "================================================\n");
printLog($LOG, "info", $prodSubReport."\n");

printLog($LOG, "info", __("Subscription Report based on NCC registrations"));
printLog($LOG, "info",  "==============================================\n");
printLog($LOG, "info", $subReport."\n");





###printLog($LOG, "info", "Example", doPrint, doLog);

my %certCheck = certificateCheck();

if (1)  # FIXME do not print if output is to be suppressed
{
    while (my ($type, $message) = each(%certCheck) )
    {
        printLog($LOG, $type, $message, 1, 1 );
    }
}
        

exit 0;
