#!/usr/bin/perl

###############################################################################
## Copyright (c) 2007, 2008, 2009 SUSE LINUX Products GmbH, Nuernberg, Germany.
###############################################################################

use strict;
use warnings;
use SMT::CLI;
use SMT::Utils;
use SMT::Mirror::RegData;
use SMT::NCCRegTools;
use File::Basename;
use File::Temp;

use Locale::gettext ();
use POSIX ();     # Needed for setlocale()

POSIX::setlocale(&POSIX::LC_MESSAGES, "");

#
# FIXME: what about /root/.curlrc for proxy settings?
#
if(!SMT::Utils::dropPrivileges())
{
    print STDERR "Unable to drop privileges. Abort!\n";
    exit 1;
}

my $mirrorable;
my $domirror;

my $debug   = 0;
my $vblevel  = LOG_ERROR|LOG_WARN|LOG_INFO1;
my $logfile = "/dev/null";
my $help    = 0;
my $fromdir = "";
my $todir   = "";
my $createdbreplfile = "";
my $mail     = 0;
my $mailtempfile = undef;

my $exitcode = 0;

use Getopt::Long;
&Getopt::Long::Configure( 'pass_through', 'no_autoabbrev');
&Getopt::Long::GetOptions(
                          'fromdir=s' => \$fromdir,
                          'todir=s'   => \$todir,
                          'createdbreplacementfile=s' => \$createdbreplfile,
                          "logfile|L=s" => \$logfile,
                          'debug|d'  => \$debug,
                          "verboselevel|v=i" => \$vblevel,
                          "mail|m"       => \$mail,
                          'help|h'   => \$help
                         );

if ( defined $help and ( $help == 1 ) )
{
    print basename($0) . " : " . __("Get data from NCC and update the local database.\n\n");
    print __("Usage:\n");
    print basename($0) . " [options]";
    print "\n\n";
    print __("Options:\n");
    print "--fromdir                 ".__("read NCC informations from directory instead of downloading it from NCC\n");
    print "                          ".__("and update the database.\n");
    print "--todir                   ".__("write NCC informations to directory without updating the database.\n");
    print "--createdbreplacementfile ".__("create a database replacement file for using smt-mirror without database.\n");
    print "--logfile -L file         ".__("Path to logfile\n");
    print "--debug                   ".__("Enable debug mode\n");
    print "--verboselevel -v level   ".__("set the verbose level\n");
    print "--mail -m                 ".__("Send output as e-mail to the administrators defined in reportEmail in smt.conf.\n");
    print "                          ".__("The output on stdout and stderr will be suppressed.\n");
  exit 0;
}

$vblevel = LOG_ERROR|LOG_WARN|LOG_INFO1|LOG_INFO2|LOG_DEBUG|LOG_DEBUG2 if($debug);

if($mail)
{
    my $dir = File::Temp::tempdir("smt-XXXXXXXX", CLEANUP => 1, TMPDIR => 1);
    $mailtempfile = "$dir/mail";
    open(MAILTEMPFILE, "> $mailtempfile") or die "Cannot open file:$!";
    open(STDOUT, ">& MAILTEMPFILE") or die "Cannot dup:$!";
    open(STDERR, ">& MAILTEMPFILE") or die "Cannot dup:$!";
    select STDERR; $| = 1;      # make unbuffered
    select STDOUT; $| = 1;      # make unbuffered
    select MAILTEMPFILE; $| = 1;        # make unbuffered
}

if($createdbreplfile ne "")
{
    SMT::CLI::createDBReplacementFile($createdbreplfile);
    exit 0;
}

if($fromdir ne "" && $todir ne "")
{
    # both options set == no option set
    $fromdir = "";
    $todir   = "";
}

if(!SMT::Utils::openLock("smt-ncc-sync"))
{
    print __("Syncronization process is still running.\n");
    exit 0;
}

# open the logfile

my $LOG = SMT::Utils::openLog($logfile);

if($fromdir ne "" && $fromdir !~ /^\//)
{
    $fromdir = SMT::Utils::cleanPath($ENV{'PWD'}, $fromdir);
}

if($todir ne "" && $todir !~ /^\//)
{
    $todir = SMT::Utils::cleanPath($ENV{'PWD'}, $todir);
}

if($fromdir ne "" && ! -d $fromdir)
{
	SMT::Utils::printLog($LOG, $vblevel, LOG_ERROR, sprintf(__("Directory '%s' does not exist."), $fromdir));
    exit 1;
}

if($todir ne "" && ! -d $todir)
{
    # directory does not exists, try to create it.
    eval {
        &File::Path::mkpath($todir);
    };
    if ($@) 
    {
        SMT::Utils::printLog($LOG, $vblevel, LOG_ERROR, sprintf(__("Cannot create %s: %s"), $todir, $@));
        exit 1;
    }
}

if($fromdir ne "")
{
    printLog($LOG, $vblevel, LOG_INFO1, sprintf(__("Read from directory: %s"), $fromdir));
}
if($todir ne "")
{
    printLog($LOG, $vblevel, LOG_INFO1, sprintf(__("Write to directory: %s"), $todir));
}

eval
{
    my $rd= SMT::Mirror::RegData->new(vblevel => $vblevel,
                                      log     => $LOG,
                                      element => "productdata",
                                      table   => "Products",
                                      key     => "PRODUCTDATAID",
                                      fromdir => (($fromdir ne "")?$fromdir:undef),
                                      todir   => (($todir ne "")?$todir:undef));
    printLog($LOG, $vblevel, LOG_INFO1, __("Downloading Product information"));
    
    my $res = $rd->sync();
    if ($res)
    {
        SMT::Utils::printLog($LOG, $vblevel, LOG_ERROR, __("Error while fetching Products data."));
        $exitcode = 1;
    }
    
    
    $rd->element("targets");
    $rd->table("Targets");
    $rd->key("OS");
    
    printLog($LOG, $vblevel, LOG_INFO1, __("Downloading Target information"));
    $res = $rd->sync();
    if ($res)
    {
        SMT::Utils::printLog($LOG, $vblevel, LOG_ERROR, __("Error while fetching Targets data."));
        $exitcode = 1;
    }
    
    $rd->element("catalogs");
    $rd->table("Catalogs");
    $rd->key("CATALOGID");
    
    printLog($LOG, $vblevel, LOG_INFO1, __("Downloading Catalog information"));
    $res = $rd->sync();
    if ($res)
    {
        SMT::Utils::printLog($LOG, $vblevel, LOG_ERROR, __("Error while fetching Catalogs data."));
        $exitcode = 1;
    }
    
    $rd->element("productcatalogs");
    $rd->table("ProductCatalogs");
    $rd->key(['PRODUCTDATAID', 'CATALOGID']);
    
    printLog($LOG, $vblevel, LOG_INFO1, __("Downloading Product/Catalog relations"));
    $res = $rd->sync();
    if ($res)
    {
        SMT::Utils::printLog($LOG, $vblevel, LOG_ERROR, __("Error while fetching ProductCatalogs data."));
        $exitcode = 1;
    }
    
    
    my $lr= SMT::NCCRegTools->new(vblevel => $vblevel,
                                  log     => $LOG,
                                  fromdir => (($fromdir ne "")?$fromdir:undef),
                                  todir   => (($todir ne "")?$todir:undef));

    printLog($LOG, $vblevel, LOG_INFO1, __("Downloading Subscription information"));
    $res = $lr->NCCListSubscriptions();
    if ($res)
    {
        SMT::Utils::printLog($LOG, $vblevel, LOG_ERROR, __("Error while fetching Subscription data."));
        $exitcode = 1;
    }
    
    printLog($LOG, $vblevel, LOG_INFO1, __("Downloading Registration information"));
    $res = $lr->NCCListRegistrations();
    if ($res)
    {
        SMT::Utils::printLog($LOG, $vblevel, LOG_ERROR, __("Error while fetching Registration data."));
        $exitcode = 1;
    }    
    
    if ($todir ne "")
    {
        SMT::CLI::setMirrorableCatalogs(todir   => $todir,
                                        log     => $LOG,
                                        vblevel => $vblevel);

        # if todir parameter is set, we can stop here. Everything is done.
        if (!SMT::Utils::unLock("smt-ncc-sync"))
        {
            SMT::Utils::printLog($LOG, $vblevel, LOG_ERROR, __("Cannot remove lockfile."));
        }
        exit 0;
    }
    
    printLog($LOG, $vblevel, LOG_INFO1, __("Flagged Catalogs which can be mirrored"));
    SMT::CLI::setMirrorableCatalogs(fromdir => ($fromdir ne "")?$fromdir:undef,
                                    todir   => ($todir ne "")?$todir:undef,
                                    log     => $LOG,
                                    vblevel => $vblevel);
    
};
if ($@)
{
    if (!SMT::Utils::unLock("smt-ncc-sync"))
    {
        SMT::Utils::printLog($LOG, $vblevel, LOG_ERROR, __("Cannot remove lockfile."));
    }
    SMT::Utils::printLog($LOG, $vblevel, LOG_ERROR, $@);
    $exitcode = 1;
}

if (!SMT::Utils::unLock("smt-ncc-sync"))
{
    SMT::Utils::printLog($LOG, $vblevel, LOG_ERROR, __("Cannot remove lockfile."));
}

if($mail)
{
    close (STDERR);
    close (STDOUT);
    close (MAILTEMPFILE);
    my $body = "";
    
    open(MAIL, "< $mailtempfile") and do
    {
        while(<MAIL>)
        {
            $body .= $_;
        }
        close MAIL;
    };
    my $datestring = POSIX::strftime("%Y-%m-%d %H:%M", localtime);
    my $subject = "SMT ncc-sync Report $datestring -- Sync ";
    if($exitcode > 0)
    {
        $subject .= "failed";
    }
    else
    {
        $subject .= "successful";
    }

    SMT::Utils::sendMailToAdmins($subject, $body);
}

exit $exitcode;

#
# Manpage
#

=head1 NAME

smt ncc-sync -  

=head1 SYNOPSIS

smt ncc-sync [options]

=head1 DESCRIPTION

C<smt ncc-sync> gets data from Novell Customer Center and updates the local database.

=head1 OPTIONS

=head2 COMMANDLINE

=over

=item --fromdir directory

Reads NCC information from directory instead of downloading it from NCC and update the database.

=item --todir directory

Write NCC informations to directory without updating the database.

=item --createdbreplacementfile

Creates a database replacement file for using smt-mirror without database.

=item --logfile -L file

Path to logfile.

=item --debug

Enable display of debug information.

=item --mail -m

Send output as e-mail to the administrators defined in reportEmail in smt.conf .
The output on stdout and stderr will be suppressed in this mode.

=back

=head1 AUTHORS and CONTRIBUTORS

Duncan Mac-Vicar Prett, Lukas Ocilka, Jens Daniel Schmidt, Michael Calmer

=head1 LICENSE

Copyright (c) 2008 SUSE LINUX Products GmbH, Nuernberg, Germany.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 675 Mass
Ave, Cambridge, MA 02139, USA.

=cut
