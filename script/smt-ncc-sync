#!/usr/bin/perl

use strict;
use warnings;
#use lib ("/srv/www/perl-lib/");
use lib ("www/perl-lib/");
use SMT::CLI;
use SMT::Utils;
use SMT::Mirror::RegData;
use SMT::NCCRegTools;
use File::Basename;

use Locale::gettext ();
use POSIX ();     # Needed for setlocale()

POSIX::setlocale(&POSIX::LC_MESSAGES, "");

my $mirrorable;
my $domirror;

my $debug   = 0;
my $logfile = "/dev/null";
my $help    = 0;
my $fromdir = "";
my $todir   = "";
my $createdbreplfile = "";

use Getopt::Long;
&Getopt::Long::Configure( 'pass_through', 'no_autoabbrev');
&Getopt::Long::GetOptions(
                          'fromdir=s' => \$fromdir,
                          'todir=s'   => \$todir,
                          'createdbreplacementfile=s' => \$createdbreplfile,
                          "logfile|L=s" => \$logfile,
                          'help|h' => \$help,
                          'debug'  => \$debug
                         );

if ( defined $help and ( $help == 1 ) )
{
    print basename($0) . " : " . __("Get data from NCC and update the local database.\n\n");
    print __("Usage:\n");
    print basename($0)." \n";
    print basename($0).__(" --fromdir directory\n");
    print basename($0).__(" --todir directory\n");
    print basename($0).__(" --createdbreplacementfile filename\n\n");
    print __("Options:\n");
    print "--fromdir                 ".__("read NCC informations from directory instead of downloading it from NCC\n");
    print "                          ".__("and update the database.\n");
    print "--todir                   ".__("write NCC informations to directory without updating the database.\n");
    print "--createdbreplacementfile ".__("create a database replacement file for using smt-mirror without database.\n");
    print "--logfile -L file         ".__("Path to logfile\n");
    print "--debug                   ".__("Enable debug mode\n");
  exit 0;
}

if($createdbreplfile ne "")
{
    SMT::CLI::createDBReplacementFile($createdbreplfile);
    exit 0;
}

if($fromdir ne "" && $todir ne "")
{
    # both options set == no option set
    $fromdir = "";
    $todir   = "";
}

if($fromdir ne "" && ! -d $fromdir)
{
	die "Directory '$fromdir' does not exist";
}
if($todir ne "" && ! -d $todir)
{
	die "Directory '$fromdir' does not exist";
}

if(!SMT::Utils::openLock("smt-ncc-sync"))
{
    print __("Syncronization process is still running.\n");
    exit 0;
}

# open the logfile

my $LOG = SMT::Utils::openLog($logfile);

eval
{
    if (0)
    {
        # We have currently no NCC support for this, so comment out
	
        my $rd= SMT::Mirror::RegData->new(debug   => $debug,
                                          log     => $LOG,
                                          element => "product",
                                          table   => "Products",
                                          key     => "PRODUCTDATAID",
                                          fromdir => (($fromdir ne "")?$fromdir:undef),
                                          todir   => (($todir ne "")?$todir:undef));
        my $res = $rd->sync();
        if ($res)
        {
            SMT::Utils::printLog($LOG, "error", __("Error while fetching Products data."));
        }

        $rd->element("targets");
        $rd->table("Targets");
        $rd->key("OS");

        $res = $rd->sync();
        if ($res)
        {
            SMT::Utils::printLog($LOG, "error", __("Error while fetching Targets data."));
        }

        $rd->element("catalogs");
        $rd->table("Catalogs");
        $rd->key("CATALOGID");

        $res = $rd->sync();
        if ($res)
        {
            SMT::Utils::printLog($LOG, "error", __("Error while fetching Catalogs data."));
        }

        $rd->element("productcatalogs");
        $rd->table("ProductCatalogs");
        $rd->key(['PRODUCTDATAID', 'CATALOGID']);

        $res = $rd->sync();
        if ($res)
        {
            SMT::Utils::printLog($LOG, "error", __("Error while fetching ProductCatalogs data."));
        }

        my $lr= SMT::NCCRegTools->new(debug   => $debug,
                                      log     => $LOG,
                                      fromdir => (($fromdir ne "")?$fromdir:undef),
                                      todir   => (($todir ne "")?$todir:undef));
        $lr->NCCListRegistrations();

        $lr->NCCListSubscriptions();
    }

    if ($todir ne "")
    {
        SMT::CLI::setMirrorableCatalogs(todir => $todir);
        # if todir parameter is set, we can stop here. Everything is done.

        if (!SMT::Utils::unLock("smt-ncc-sync"))
        {
            SMT::Utils::printLog($LOG, "error", __("Cannot remove lockfile."));
        }
        exit 0;
    }

    SMT::CLI::resetCatalogsStatus();
    SMT::CLI::setMirrorableCatalogs(fromdir => ($fromdir ne "")?$fromdir:undef,
                                    todir   => ($todir ne "")?$todir:undef,
                                    log     => $LOG,
                                    debug   => $debug);

};
if ($@)
{
    if (!SMT::Utils::unLock("smt-ncc-sync"))
    {
        SMT::Utils::printLog($LOG, "error", __("Cannot remove lockfile."));
    }
    SMT::Utils::printLog($LOG, "error", $@);
    exit 1;
}

if (!SMT::Utils::unLock("smt-ncc-sync"))
{
    SMT::Utils::printLog($LOG, "error", __("Cannot remove lockfile."));
}

exit 0;


#
# Manpage
#

=head1 NAME

smt ncc-sync -  

=head1 SYNOPSIS

smt [help|--help|-h] ncc-sync [options]

=head1 DESCRIPTION

smt ncc-sync


=head1 OPTIONS

=head2 


=head1 AUTHORS and CONTRIBUTORS

Duncan Mac-Vicar Prett, Lukas Ocilka, Jens Daniel Schmidt, Michael Calmer

=head1 LICENSE

Copyright (c) 2008 SUSE LINUX Products GmbH, Nuernberg, Germany.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 675 Mass
Ave, Cambridge, MA 02139, USA.

=cut
