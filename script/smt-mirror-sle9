#! /usr/bin/perl

###############################################################################
## Copyright (c) 2007, 2008, 2009 SUSE LINUX Products GmbH, Nuernberg, Germany.
###############################################################################

use strict;
use warnings;
use Config::IniFiles;
use SMT::Utils;
use URI;
use File::Path;
use IPC::Open3;
use Fcntl qw(:DEFAULT);
use Log::Log4perl qw(get_logger :levels);

use Getopt::Long;
use File::Basename;

use Time::HiRes qw(gettimeofday tv_interval);

use Locale::gettext ();
use POSIX ();     # Needed for setlocale()

POSIX::setlocale(&POSIX::LC_MESSAGES, "");

if(!SMT::Utils::dropPrivileges())
{
    print STDERR "Unable to drop privileges. Abort!\n";
    exit 1;
}

my $debug  = 0;
my $vblevel  = LOG_ERROR|LOG_WARN|LOG_INFO1;
my $log    = undef;
my $errors = 0;
my $help     = 0;
my $logfile = "/var/log/smt/smt-mirror-sle9.log";


Getopt::Long::Configure( 'no_auto_abbrev');
my $optres = GetOptions ("debug|d"     => \$debug,
                         "verboselevel|v=i" => \$vblevel,
                         "logfile|L=s" => \$logfile,
                         "help|h"      => \$help
                        );
if($help || !$optres)
{
    print basename($0) . " [--debug] [--logfile <file>]";
    print "\n";
    print __("Options:\n");
    print "--debug -d              " . __("enable debug mode\n");
    print "--verboselevel -v level " . __("set the verbose level\n");
    print "--logfile -L file       " . __("Path to logfile\n");
    exit 0;
}

$vblevel = LOG_ERROR|LOG_WARN|LOG_INFO1|LOG_INFO2|LOG_DEBUG|LOG_DEBUG2 if($debug);

# get a lock

if(!SMT::Utils::openLock("smt-mirror-sle9"))
{
    print __("SLE9 Mirror process is still running.\n");
    exit 0;
}

# open the logfile

Log::Log4perl::init("/etc/smt.d/log4perl.conf");

# to change the loglevel we need the root logger,
# not the derived main logger
$log = get_logger('');
$log->level(SMT::Utils::vblevel2log4perl4File($vblevel));
my $out = get_logger('userlogger');
$out->level(SMT::Utils::vblevel2log4perl4Screen($vblevel));

# to be able to parse the output of wget correctly set language
# to english
$ENV{LANG}     = "en_US.UTF-8";
$ENV{LANGUAGE} = "en_US.UTF-8";

#
# does .wgetrc exist? If not print a warning
#
if( ! -e "$ENV{HOME}/.wgetrc" )
{
    $log->warn("WARNING: $ENV{HOME}/.wgetrc does not exist.");
    $out->warn("WARNING: $ENV{HOME}/.wgetrc does not exist.");
}

my $cfg;
eval {
    $cfg = SMT::Utils::getSMTConfig();
};
if($@)
{
  my $err = $@;
  chomp($err);
  $log->error("$err");
  $out->error("$err");
  SMT::Utils::unLockAndExit( "smt-mirror-sle9", 1);
}

my $mirrorTo = $cfg->val("LOCAL", "MirrorTo");
$mirrorTo .= "/repo/YOU9/";

my @sections = $cfg->Sections();


# search for proxy settings
my ($httpProxy, $httpsProxy, $noProxy, $proxyUser) = SMT::Utils::getProxySettings();

if(defined $httpProxy)
{
    $ENV{http_proxy} = $httpProxy;
}
if(defined $httpsProxy)
{
    $ENV{https_proxy} = $httpsProxy;
}
if(defined $noProxy)
{
    $ENV{no_proxy} = $noProxy;
}

#
# we do not set proxyUser! If you need this, write this into your .wgetrc
#
# proxy_user=username
# proxy_password=password
#

foreach my $sname (@sections)
{
    next if($sname !~ /^YOU9-/);

    my $mirror          = (lc($cfg->val($sname, "mirror")) eq "true")?1:0;

    next if(!$mirror);
    
    my $mirror_prod     = $cfg->val($sname, "mirror_prod");
    my @mirror_archs    = split(/\s*,\s*/, $cfg->val($sname, "mirror_archs"));
    my @mirror_versions = split(/\s*,\s*/, $cfg->val($sname, "mirror_version"));
    my $credentials     = $cfg->val($sname, "credentials");
    
    foreach my $arch (@mirror_archs)
    {
        foreach my $version (@mirror_versions)
        {
            # reset error variable
            $errors = 0;
            my $t0 = [gettimeofday] ;
            
            my $uri = URI->new("https://you.novell.com/");
            $uri->userinfo($credentials);
            $uri->path("/update/$arch/update/$mirror_prod/$version/");
            
            my $saveuri = $uri->clone();
            $saveuri->userinfo(undef);
            
            my $destdir = "$mirrorTo/$arch/update/$mirror_prod/$version/";
            &File::Path::mkpath( $destdir );
            
            my   $cmd = "/usr/bin/wget";
            my   @cmdargs = ("--mirror", "--no-parent", "--no-host-directories");
            push @cmdargs, "--dns-timeout", "30";
            push @cmdargs, "--connect-timeout", "30";
            push @cmdargs, "--read-timeout", "60";
            push @cmdargs, "--directory-prefix", $destdir;
            push @cmdargs, "--cut-dirs", "5"; #, "-nv";
            push @cmdargs, "-i", "-";
            
            $log->info(sprintf("Mirroring: %s", $saveuri->as_string));
            $log->info(sprintf("Target:    %s", $destdir));
            
            $out->info(sprintf(__("Mirroring: %s"), $saveuri->as_string));
            $out->info(sprintf(__("Target:    %s"), $destdir));
            
            my $pid = open3(\*IN, \*ERR, \*ERR, $cmd, @cmdargs) or do
            {
                $log->error("Cannot execute $cmd ".join(" ", @cmdargs).": $!");
                $out->error(sprintf(__("Cannot execute %s %s : %s"), $cmd, join(" ", @cmdargs), $!));
                return 1;
            };
            print IN $uri->as_string."\n";
            
            close IN;
            
            my $err = "";
            my $currentfile="";
            
            while (<ERR>)
            {
                $err = $_;
                chomp($err);
                next if($err =~ /^\s*$/);
                next if($err =~ /\.\.\.\.\./);
                
                if($err =~ /not\s+retrieving/i)
                {
                    $log->debug(sprintf("----> %s is up to date", $currentfile));
                    $currentfile = "";
                }
                elsif($err =~ /saved/i)
                {
                    $log->info(sprintf("Fetch [%s]", $currentfile));
                    $out->info(sprintf("Fetch [%s]", $currentfile));
                    $currentfile = "";
                }
                
                if($err =~ /--\s+(http.*)$/)
                {
                    next if("$1" eq "$currentfile");
                    $currentfile=$1;
                    $currentfile =~ s/`//;
                    $currentfile =~ s/'//;
                }
                elsif($err =~ /request sent, awaiting response\.\.\.\s(\d+)\s+(.*)/)
                {
                    my $code = $1;
                    my $msg  = $2;
                    
                    if(int($code) >= 400)
                    {
                        next if(int($code) == 401);  # Unauthorized means, password not yet send. We can ignore this

                        # do not show an error if an index file of subdirectories cannot fetched
                        my $uripath = $uri->path;
                        next if ( $currentfile =~ /$uripath[^\/]+\/$/ || $currentfile =~ /$uripath[^\/]+\/\?/ );

                        # do not show errors if currentfile is not set or we cannot fetch robots.txt
                        next if($currentfile eq "" || $currentfile =~ /robots\.txt/);

                        $log->error(sprintf("Failed to download '%s': %s", $currentfile, "$code: $msg"));
                        $out->error(sprintf(__("Failed to download '%s': %s"), $currentfile, "$code: $msg"));
                        $errors += 1;
                    }
                    elsif(int($code) >= 300)
                    {
                        $log->info("$currentfile - HTTP Status $code: $msg");
                        $out->info("$currentfile - HTTP Status $code: $msg");
                    }
                }
                elsif($err =~ /failed/i)
                {
                    $currentfile = "";
                    $log->error( $err );
                    $out->error( $err );
                    $errors += 1;
                }
            }
            close ERR;
            waitpid $pid, 0;
            if(($?>>8) != 0)
            {
                $errors += 1;
            }

            $log->info(sprintf("=> Finished mirroring '%s'", $saveuri->as_string));
            $log->info(sprintf("=> Errors           : %s", $errors));
            $log->info(sprintf("=> Mirror Time      : %s", SMT::Utils::timeFormat(tv_interval($t0))));
            
            $out->info(sprintf(__("=> Finished mirroring '%s'"), $saveuri->as_string));
            $out->info(sprintf(__("=> Errors           : %s"), $errors));
            $out->info(sprintf(__("=> Mirror Time      : %s"), SMT::Utils::timeFormat(tv_interval($t0))));
            $out->info(" ");
        }
    }
}


SMT::Utils::unLockAndExit( "smt-mirror-sle9", 0);

sub logfile
{
  return $logfile if($logfile);
  return "/var/log/smt/smt-mirror-sle9.log";
}

#
# Manpage
#

=head1 NAME

smt mirror-sle9

=head1 SYNOPSIS

smt [help|--help|-h] mirror-sle9

smt mirror-sle9 [--debug] [--logfile <file>]

=head1 DESCRIPTION

C<smt mirror-sle9> mirror old style update repositories which were used for 
SUSE LINUX Enterprise Server 9 and similar products. This script mirrores from
I<you.novell.com>.

The configuration happens in /etc/smt.conf .


=head1 OPTIONS

=head2 COMMANDLINE

=over

=item --logfile -L <file>

Write log messages to B<file>.

=item --debug -d

Enable debug mode.

=item --help -h

Show a help message.

=back

=head2 CONFIGURATION FILE

=over

The sections which are used by C<smt mirror-sle9> begin with B<YOU9->. All
products which are still in maintanence mode are listed. 

=item mirror_prod

The product name.

=item mirror_archs

List of architectures which should be mirrored. The list is seperated by B<,>.
The default list include all possible architectures. Remove the once you 
do not want to mirror.

=item mirror_version

The version number.

=item mirror

If set to B<true> C<smt mirror-sle9> will download these repositories.

=item credentials

Configure your credentials here. The format is: <username>:<password>.


=head1 AUTHORS and CONTRIBUTORS

Duncan Mac-Vicar Prett, Lukas Ocilka, Jens Daniel Schmidt, Michael Calmer

=head1 LICENSE

Copyright (c) 2008 SUSE LINUX Products GmbH, Nuernberg, Germany.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 675 Mass
Ave, Cambridge, MA 02139, USA.

=cut
