#! /usr/bin/perl -w

###########################################################################
## Copyright (c) 2007 SUSE LINUX Products GmbH, Nuernberg, Germany.
###########################################################################


use strict;
use Config::IniFiles;
use SMT::Utils;
use URI;
use File::Path;
use IPC::Open3;
use Fcntl qw(:DEFAULT);

use Getopt::Long;
use File::Basename;

use Time::HiRes qw(gettimeofday tv_interval);

use Locale::gettext ();
use POSIX ();     # Needed for setlocale()

POSIX::setlocale(&POSIX::LC_MESSAGES, "");

my $debug  = 0;
my $log    = undef;
my $errors = 0;
my $help     = 0;
my $logfile = "/dev/null";


my $result = GetOptions ("debug|d"     => \$debug,
                         "logfile|L=s" => \$logfile,
                         "help|h"      => \$help
                        );
if($help)
{
    print basename($0) . " [--debug] [--logfile <file>]";
    print "\n";
    print __("Options:\n");
    print "--debug -d        " . __("enable debug mode\n");
    print "--logfile -L file " . __("Path to logfile\n");
    exit 0;
}

# get a lock

if(!SMT::Utils::openLock("smt-mirror-sle9"))
{
    print __("SLE9 Mirror process is still running.\n");
    exit 0;
}

# open the logfile

$log = SMT::Utils::openLog($logfile);


# to be able to parse the output of wget correctly set language
# to english
$ENV{LANG}     = "en_US.UTF-8";
$ENV{LANGUAGE} = "en_US.UTF-8";

my $cfg;
eval {
    $cfg = SMT::Utils::getSMTConfig();
};
if($@)
{
    if(!SMT::Utils::unLock("smt-mirror-sle9"))
    {
        SMT::Utils::printLog($log, "error",  __("Cannot remove lockfile."));
    }
    SMT::Utils::printLog($log, "error", "$@");
    exit 1;
}

my $mirrorTo = $cfg->val("LOCAL", "MirrorTo");
$mirrorTo .= "/repo/YOU9/";

my @sections = $cfg->Sections();


# search for proxy settings
my ($httpProxy, $httpsProxy, $proxyUser) = SMT::Utils::getProxySettings();

if(defined $httpProxy)
{
    $ENV{http_proxy} = $httpProxy;
}
if(defined $httpsProxy)
{
    $ENV{https_proxy} = $httpsProxy;
}
#
# we do not set proxyUser! If you need this, write this into your .wgetrc
#
# proxy_user=username
# proxy_password=password
#

foreach my $sname (@sections)
{
    next if($sname !~ /^YOU9-/);

    my $mirror          = (lc($cfg->val($sname, "mirror")) eq "true")?1:0;

    next if(!$mirror);
    
    my $mirror_prod     = $cfg->val($sname, "mirror_prod");
    my @mirror_archs    = split(/\s*,\s*/, $cfg->val($sname, "mirror_archs"));
    my @mirror_versions = split(/\s*,\s*/, $cfg->val($sname, "mirror_version"));
    my $credentials     = $cfg->val($sname, "credentials");
    
    foreach my $arch (@mirror_archs)
    {
        foreach my $version (@mirror_versions)
        {
            # reset error variable
            $errors = 0;
            my $t0 = [gettimeofday] ;
            
            my $uri = URI->new("https://you.novell.com/");
            $uri->userinfo($credentials);
            $uri->path("/update/$arch/update/$mirror_prod/$version/");
            
            my $saveuri = $uri->clone();
            $saveuri->userinfo(undef);
            
            my $destdir = "$mirrorTo/$arch/update/$mirror_prod/$version/";
            &File::Path::mkpath( $destdir );
            
            my   $cmd = "/usr/bin/wget";
            my   @cmdargs = ("--mirror", "--no-parent", "--no-host-directories");
            push @cmdargs, "--dns-timeout", "30";
            push @cmdargs, "--connect-timeout", "30";
            push @cmdargs, "--read-timeout", "60";
            push @cmdargs, "--directory-prefix", $destdir;
            push @cmdargs, "--cut-dirs", "5"; #, "-nv";
            push @cmdargs, "-i", "-";
            
            SMT::Utils::printLog($log, "info", sprintf(__("Mirroring: %s"), $saveuri->as_string));
            SMT::Utils::printLog($log, "info", sprintf(__("Target:    %s"), $destdir));

            #printLog($log, "debug", "Execute $cmd ".join(" ", @cmdargs)) if($debug);
            
            my $pid = open3(\*IN, \*ERR, \*ERR, $cmd, @cmdargs) or do
            {
                SMT::Utils::printLog($log, "error", "Cannot execute $cmd ".join(" ", @cmdargs).": $!");
                return 1;
            };
            print IN $uri->as_string."\n";
            
            close IN;
            
            my $err = "";
            my $currentfile="";
            
            while (<ERR>)
            {
                $err = $_;
                chomp($err);
                next if($err =~ /^\s*$/);
                next if($err =~ /\.\.\.\.\./);
                
                if($err =~ /not\s+retrieving/i)
                {
                    SMT::Utils::printLog($log, "debug", sprintf("----> %s is up to date", $currentfile)) if($debug);
                }
                elsif($err =~ /saved/i)
                {
                    SMT::Utils::printLog($log, "debug", sprintf("Fetch [%s]", $currentfile)) if($debug);
                }
                
                if($err =~ /\s+=>\s*(.*)/)
                {
                    next if("$1" eq "$currentfile");
                    $currentfile=$1;
                }
                elsif($err =~ /request sent, awaiting response\.\.\.\s(\d+)\s+(.*)/)
                {
                    my $code = $1;
                    my $msg  = $2;
                    
                    if(int($code) >= 400)
                    {
                        # ignore "403 Forbidden" for index.html and robots.txt 
                        next if(int($code) >= 403 && ($currentfile =~ /index\.html/ || $currentfile =~ /robots\.txt/));

                        SMT::Utils::printLog($log, "error", sprintf(__("Failed to download '%s': %s"), $currentfile, "$code: $msg"));
                        $errors += 1;
                    }
                    elsif(int($code) >= 300)
                    {
                        SMT::Utils::printLog($log, "info", "$currentfile - HTTP Status $code: $msg");
                    }
                }
                elsif($err =~ /failed/i)
                {
                    SMT::Utils::printLog($log, "error", $err);
                    $errors += 1;
                }
            }
            close ERR;
            waitpid $pid, 0;
            if(($?>>8) != 0)
            {
                $errors += 1;
            }

            SMT::Utils::printLog($log, "info", sprintf(__("=> Finished mirroring '%s'"), $saveuri->as_string));
            SMT::Utils::printLog($log, "info", sprintf(__("=> Errors           : %s"), $errors));
            SMT::Utils::printLog($log, "info", sprintf(__("=> Mirror Time      : %s"), SMT::Utils::timeFormat(tv_interval($t0))));
            print "\n";
        }
    }
}


if(!SMT::Utils::unLock("smt-mirror-sle9"))
{
    SMT::Utils::printLog($log, "error", __("Cannot remove lockfile."));
    exit 1;
}

exit 0;

#
# Manpage
#

=head1 NAME

smt mirror-sle9

=head1 SYNOPSIS

smt [help|--help|-h] mirror-sle9

smt mirror-sle9 [--debug] [--logfile <file>]

=head1 DESCRIPTION

C<smt mirror-sle9> mirror old style update repositories which were used for 
SUSE LINUX Enterprise Server 9 and similar products. This script mirrores from
I<you.novell.com>.

The configuration happens in /etc/smt.conf .


=head1 OPTIONS

=head2 COMMANDLINE

=over

=item --logfile -L <file>

Write log messages to B<file>.

=item --debug -d

Enable debug mode.

=item --help -h

Show a help message.

=back

=head2 CONFIGURATION FILE

=over

The sections which are used by C<smt mirror-sle9> begin with B<YOU9->. All
products which are still in maintanence mode are listed. 

=item mirror_prod

The product name.

=item mirror_archs

List of architectures which should be mirrored. The list is seperated by B<,>.
The default list include all possible architectures. Remove the once you 
do not want to mirror.

=item mirror_version

The version number.

=item mirror

If set to B<true> C<smt mirror-sle9> will download these repositories.

=item credentials

Configure your credentials here. The format is: <username>:<password>.


=head1 AUTHORS and CONTRIBUTORS

Duncan Mac-Vicar Prett, Lukas Ocilka, Jens Daniel Schmidt, Michael Calmer

=head1 LICENSE

Copyright (c) 2008 SUSE LINUX Products GmbH, Nuernberg, Germany.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 675 Mass
Ave, Cambridge, MA 02139, USA.

=cut
