#!/usr/bin/perl

use strict;
use warnings;
use lib ("/srv/www/perl-lib/");
use SMT::CLI;
use File::Basename;
use SMT::Utils;
use Text::ASCIITable;

use Locale::gettext ();
use POSIX ();     # Needed for setlocale()

POSIX::setlocale(&POSIX::LC_MESSAGES, "");

my $enable;
my $enableByProduct = "";
my $disable;
my $mirrorable;
my $domirror;
my $verbose;
my $help;

use Getopt::Long;
&Getopt::Long::Configure( 'pass_through', 'no_autoabbrev');
&Getopt::Long::GetOptions(
         'enable-mirror|e'         => \$enable,
         'enable-by-prod|p=s'        => \$enableByProduct,
         'disable-mirror|d'        => \$disable,
         'only-mirrorable|m'         => \$mirrorable,
         'only-enabled|o'        => \$domirror,
         'verbose|v'        => \$verbose,
         'help|h' => \$help
);


if ( defined $help and ( $help == 1 ) )
{
  print basename($0) . " [name] [target]: " . __("Enable or disable mirroring of a catalog\n");
  print "    -enable-miror    (-e) :     " . __("enable catalog mirorring for \$catalog\n");
  print "    -enable-by-prod  (-p) arg : " . __("enable catalog mirroring by giving product data\n");
  print "                                Product[,Version[,Architecture[,Release]]]\n";
  print "    -disable-mirror  (-d) :     " . __("disable catalog mirroring for \$catalog\n");
  print "    -only-mirrorable (-m) :     " . __("only show mirrorable catalogs\n");
  print "    -only-enabled    (-o) :     " . __("only show catalogs set to be mirrored\n");
  print "    -verbose         (-v) :     " . __("show detailed catalog information\n");
  exit 0;
}

if( $enableByProduct ne "" )
{
    my $ret = SMT::CLI::enableCatalogsByProduct( verbose => $verbose, prodStr => $enableByProduct);
    exit $ret;
}

my $name = shift(@ARGV);

if ( defined $disable && defined $enable )
{
  die __("Neurosis is the inability to tolerate ambiguity. Sigmund Freud.\n");
}

my $bool;
if ( defined $disable )
{
  $bool = ( $disable == 1 ? 0 : 1 );
}

if ( defined $enable )
{
  $bool = ( $enable == 1 ? 1 : 0 );
}

my $target = shift(@ARGV);

my ($cfg, $dbh, $nuri) = SMT::CLI::init();

my $count = 0;
my @catalogs;
my $sql = "select * from Catalogs";

$sql = $sql . " where 1";

if ( defined($mirrorable) )
{
      if (  $mirrorable == 1 )
      {
        $sql = $sql . " and MIRRORABLE='Y'";
      }
      else
      {
        $sql = $sql . " and MIRRORABLE='N'";
      }
}

if ( defined($domirror) )
{
      if (  $domirror == 1 )
      {
        $sql = $sql . " and DOMIRROR='Y'";
      }
      else
      {
        $sql = $sql . " and DOMIRROR='N'";
      }
}

if (defined $name && $name ne "")
{
  $sql = $sql . sprintf(" and NAME=%s", $dbh->quote($name) );
}
# if target was given, limit the search even more
if (defined $target && $target ne "")
{
  $sql = $sql . sprintf(" and TARGET=%s", $dbh->quote($target) );
}

# hash to associate order with id.
my @idnumbers;
my $sth = $dbh->prepare($sql);
$sth->execute();

my $t = new Text::ASCIITable;
$t->setCols(__("Mirror?"), __("ID"), __("Type"), __("Name"), __("Target"), __("Description"), __("Can be Mirrored"));

while ( my $v = $sth->fetchrow_hashref() )
{
  $count++;
  my $catId = $v->{CATALOGID};
  push(@idnumbers, $catId);
  my $catName = $v->{NAME};
  my $catTarget = $v->{TARGET};
  my $catType = $v->{CATALOGTYPE};
  my $catDesc = $v->{DESCRIPTION};
  my $catMA   = $v->{MIRRORABLE};
  $t->addRow( (( $v->{DOMIRROR} eq "Y" ) ? __("Yes") :  __("No")), $count, $catType, $catName, ( defined($catTarget) ? $catTarget : "--"), 
              $catDesc,  (( $catMA eq "Y" ) ? __("Yes") : __("No")));
  
  if (defined($verbose))
  {
      print "[" . (( $v->{DOMIRROR} eq "Y" ) ? "*] " : " ] ") . "[" . sprintf("%3d", $count) . "] " . $catName ." " . ( defined($catTarget) ? $catTarget : "--") . "\n";
      print "          (" . $v->{DESCRIPTION} .")\n";
      print "          " . $v->{EXTURL} ."\n";
      print "          " . $v->{LOCALPATH} ."\n";
  }

}

print $t->draw() if not defined($verbose);

if ( (not defined $disable) && (not defined $enable) )
{
  # not do any action, display was enough
  exit 0;
}

if ( $count == 0 )
{
  die __(sprintf("no catalog named %s\n", $name));
}
elsif ( $count == 1 )
{
  # we are lucky, only one
  SMT::CLI::setCatalogDoMirror(enabled => $bool, id => $idnumbers[0]);
  exit 0;
}
else
{
  print __(sprintf("Select catalog number (or all) to change,  (0-". $count.",a) :") );

  my $answer = <STDIN>;
  chomp($answer);
  
  if(lc($answer) eq __("a"))
  {
    SMT::CLI::setCatalogDoMirror(enabled => $bool, name => $name, target => $target);
    exit 0;
  }
  elsif ( $answer =~ /[0-9]+/ )
  {
    my $number = int($answer);
    SMT::CLI::setCatalogDoMirror(enabled => $bool, id => $idnumbers[$number-1]);
    exit 0;
  }
  else
  {
    die __("canceled");
  }
}

exit 0;

0
