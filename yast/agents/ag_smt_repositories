#!/usr/bin/perl -w

#
# File:
#   ag_smt_repositories
#
# Authors:
#   Lukas Ocilka <locilka@suse.cz>
#
# Description:
#   SCR agent for reading and adjusting SMT repositories
#
# $Id$
#


use lib "/usr/lib/YaST2/agents_non_y2";
use ycp;
use strict;

use SMT::Utils;
use SMT::CLI;
use SMT::Repositories;

# For debugging only
# use Data::Dumper;

# Suppress printing logs to STDOUT, to nemaji kralicci radi 
# (SCR uses stdin/stdout for communication with agents) 
SMT::Utils::setLogBehavior ({'doprint' => 0});

if(! SMT::Utils::dropPrivileges()) {
    y2error ('Unable to drop privileges. Aborting...');
    ycp::Return (undef);
    exit 1;
}

# Initialize SMT
my ($cfg, $dbh, $nuri) = SMT::CLI::init();
my $repositories = SMT::Repositories::new($dbh);

use constant {
    YCP_TRUE	=> 'true',
    YCP_FALSE	=> 'false',

    # All Mirrored repositories with Staging feature enabled
    ALL_REPO_FILTER => {
	SMT::Repositories::MIRRORABLE	=> SMT::Repositories::MIRRORABLE_TRUE,
    },
};

# Reports that the agent has been called using an unsupported path
sub UnsupportedPath ($$) {
    my ($command_ref, $path_ref) = (shift, shift);

    y2error ('Unsupported path: '.$$path_ref.' for command '.$$command_ref);
    ycp::Return (undef);
}

# the main() loop
while (<STDIN>) {
    my ($command, $path, $arg) = ycp::ParseCommand ($_);
    # Just for debugging
    # y2internal ('Command:'.Dumper($command).' Path:'.Dumper($path).' Arg:'.Dumper($arg));

    # For Perl-only testing, otherwise already removed
    if ($path =~ /^\.smt\.repositories/) {
	$path =~ s/^\.smt\.repositories//;
    }

    if ($command eq 'Read') {
	if ($path eq '.all') {
	    ycp::Return ($repositories->GetAllRepositories (ALL_REPO_FILTER));
	} else {
	    UnsupportedPath (\$command, \$path);
	}
    } elsif ($command eq 'Write') {
	UnsupportedPath (\$command, \$path);
    # destructor
    } elsif ($command eq 'result') {
	y2milestone ('Bye bye...');
	last;
    } else {
	y2error ('Unknown SCR command: '.$command);
	ycp::Return (undef);
    }
}
# the main() loop

exit 0;
