#!/usr/bin/perl -w

#
# File:
#   ag_smt_staging
#
# Authors:
#   Lukas Ocilka <locilka@suse.cz>
#
# Description:
#   SCR agent for repositories staging management
#
# $Id$
#


use lib "/usr/lib/YaST2/agents_non_y2";
use ycp;
use strict;

use SMT::Utils;
use SMT::CLI;
use SMT::Filter;
use SMT::Repositories;
use SMT::Parser::RpmMdPatches;

# For debugging only
# use Data::Dumper;

if(! SMT::Utils::dropPrivileges()) {
    y2error ('Unable to drop privileges. Aborting...');
    ycp::Return (undef);
    exit 1;
}

# Initialize SMT
my ($cfg, $dbh, $nuri) = SMT::CLI::init();
my $base_path = $cfg->val("LOCAL", "MirrorTo") || '/srv/www/htdocs';
my $repositories = SMT::Repositories::new($dbh);

use constant {
    YCP_TRUE	=> 'true',
    YCP_FALSE	=> 'false',

    # All Mirrored repositories with Staging feature enabled
    MIRRORED_REPO_FILTER => {
	SMT::Repositories::MIRRORING	=> SMT::Repositories::MIRRORING_TRUE,
	SMT::Repositories::STAGING	=> SMT::Repositories::STAGING_TRUE,
    },
};

# Reports that the agent has been called using an unsupported path
sub UnsupportedPath ($$) {
    my ($command_ref, $path_ref) = (shift, shift);

    y2error ('Unsupported path: '.$$path_ref.' for command '.$$command_ref);
    ycp::Return (undef);
}

# Filters and Patches Handles
my $fph = {};

# Initializes required handles (in not yet initialized)
# loads filters
sub LoadRepositoryData ($) {
    my $repositoryid = shift || "";

    # No repository ID defined, unable to load data
    if ($repositoryid eq "") {
	y2error ("Repository ID must be defined");
	return undef;
    }

    # Already loaded
    if (defined $fph->{$repositoryid}) {
	return 1;
    }

    my $ret = 1;

    # New empty Handler
    $fph->{$repositoryid} = {};

    # New Filter handler
    $fph->{$repositoryid}->{'fh'} = SMT::Filter->new();
    if (! $fph->{$repositoryid}->{'fh'}->load($dbh, $repositoryid)) {
	y2error ("Cannot load filters for repository: ".$repositoryid);
	$ret = 0;
    }

    my $repo_path = $base_path.'/repo/full/'.$repositories->GetRepositoryPath($repositoryid);
    y2debug ("Using local path: ".$repo_path);

    # The following lines should go to a module in SMT package
    # New Patches-Parser handler
    $fph->{$repositoryid}->{'ph'} = SMT::Parser::RpmMdPatches->new();
    $fph->{$repositoryid}->{'ph'}->resource($repo_path);
    $fph->{$repositoryid}->{'ph'}->parse("repodata/updateinfo.xml.gz", "repodata/patches.xml");

    return $ret;
}

# Goes through all the SMT::Filter handles and saves the data
# repository by repository
sub WritePatchFilters () {
    my $repositoryid = '';

    my $ret = 1;

    foreach $repositoryid (keys %{$fph}) {
	y2milestone ("Calling save() on Catalog:".$repositoryid);
	if (! $fph->{$repositoryid}->{'fh'}->save($dbh, $repositoryid)) {
	    y2error ("Error saving catalog ".$repositoryid);
	    $ret = 0;
	}
    }

    return ($ret ? YCP_TRUE:YCP_FALSE);
}

# Returns patches with their status
sub GetAllPatches ($) {
    my $repositoryid = shift || "";

    if ($repositoryid eq "") {
	y2error ("Catalog ID must be defined");
	return undef;
    }

    y2milestone ("Handling repositoryid: ".$repositoryid);

    LoadRepositoryData($repositoryid);

    my @ret;
    my $patchname = "";
    my $tmppatch = {};

    foreach my $patchid (keys %{$fph->{$repositoryid}->{'ph'}->{'PATCHES'}}) {
	$tmppatch = $fph->{$repositoryid}->{'ph'}->{'PATCHES'}->{$patchid};
	$tmppatch->{'patchid'} = $patchid;
	$tmppatch->{'filtered'} = ($fph->{$repositoryid}->{'fh'}->matches($tmppatch) ? YCP_TRUE:YCP_FALSE);
	push @ret, $tmppatch;
    }

    return \@ret;
}

# Changes the patch status by adding or removing TYPE_NAME_VERSION filter
# Patches can be matching another filters though
sub ChangePatchStatus ($) {
    my $params = shift;

    my $repositoryid	= $params->{'repositoryid'}	|| '';
    my $patchid		= $params->{'patchid'}		|| '';
    my $new_status	= $params->{'status'}		|| '';

    if ($repositoryid eq '') {
	y2error ("Parameter 'repositoryid' not defined");
	return YCP_FALSE;
    }
    if ($patchid eq '') {
	y2error ("Parameter 'patchid' not defined");
	return YCP_FALSE;
    }

    LoadRepositoryData($repositoryid);

    # true -> wanted in testig repository
    if ($new_status) {
	$fph->{$repositoryid}->{'fh'}->remove(SMT::Filter::TYPE_NAME_VERSION, $patchid);
    # false -> not wanted
    } else {
	$fph->{$repositoryid}->{'fh'}->add(SMT::Filter::TYPE_NAME_VERSION, $patchid);
    }

    return YCP_TRUE;
}

# Changes status of a filter by category
sub ChangeCategoryFilterStatus ($) {
    my $params = shift;

    my $repositoryid	= $params->{'repositoryid'}	|| '';
    my $type		= $params->{'type'}		|| '';
    my $new_status	= $params->{'status'}		|| '';

    if ($repositoryid eq '') {
	y2error ("Parameter 'repositoryid' not defined");
	return YCP_FALSE;
    }
    if ($type eq '') {
	y2error ("Parameter 'type' not defined");
	return YCP_FALSE;
    }

    LoadRepositoryData($repositoryid);

    # true -> filter is required
    if ($new_status) {
	$fph->{$repositoryid}->{'fh'}->add(SMT::Filter::TYPE_SECURITY_LEVEL, $type);
    # false -> remove filter
    } else {
	$fph->{$repositoryid}->{'fh'}->remove(SMT::Filter::TYPE_SECURITY_LEVEL, $type);
    }

    return YCP_TRUE;
}

# Returns whether patch is enabled in testing repository
sub GetPatchStatus ($) {
    my $params = shift;

    my $repositoryid	= $params->{'repositoryid'}	|| '';
    my $patchid		= $params->{'patchid'}		|| '';

    if ($repositoryid eq '') {
	y2error ("Parameter 'repositoryid' not defined");
	return undef;
    }
    if ($patchid eq '') {
	y2error ("Parameter 'patchid' not defined");
	return undef;
    }

    LoadRepositoryData($repositoryid);

    my $this_patch = $fph->{$repositoryid}->{'ph'}->{'PATCHES'}->{$patchid};
    # The current patch status (in testing repo) -> ! matching (filters)
    return ($fph->{$repositoryid}->{'fh'}->matches($this_patch) ? YCP_FALSE:YCP_TRUE);
}

# Returns whether a given filter exists
#
# $param->{'repositoryid'} - hash to identyfy a catalog
# $param->{'type'} - one of the well known types
# $param->{'filter'} - filter string
sub FilterExists ($) {
    my $params = shift;

    my $repositoryid	= $params->{'repositoryid'}	|| '';
    my $type		= $params->{'type'}		|| '';
    my $filter		= $params->{'filter'}		|| '';

    if ($repositoryid eq '') {
	y2error ("Parameter 'repositoryid' not defined");
	return undef;
    }
    if ($type eq '') {
	y2error ("Parameter 'type' not defined");
	return undef;
    }
    if ($filter eq '') {
	y2error ("Parameter 'filter' not defined");
	return undef;
    }

    LoadRepositoryData($repositoryid);
    return $fph->{$repositoryid}->{'fh'}->contains($type, $filter);
}

# Returns whether filter by patch type exists (is active)
sub SecurityLevelFilterExists ($) {
    my $arg = shift;

    my $func_args = {
	'type' => SMT::Filter::TYPE_SECURITY_LEVEL,
	# filter string is the security level of a patch
	'filter' => (defined $arg->{'type'} ? $arg->{'type'}:''),
	'repositoryid' => (defined $arg->{'repositoryid'} ? $arg->{'repositoryid'}:''),
    };

    return (FilterExists ($func_args) ? YCP_TRUE:YCP_FALSE);
}

# the main() loop
while (<STDIN>) {
    my ($command, $path, $arg) = ycp::ParseCommand ($_);
    # Just for debugging
    # y2internal ('Command:'.Dumper($command).' Path:'.Dumper($path).' Arg:'.Dumper($arg));

    # For Perl-only testing, otherwise already removed
    if ($path =~ /^\.smt\.staging/) {
	$path =~ s/^\.smt\.staging//;
    }

    if ($command eq 'Read') {
	if ($path eq '.repositories') {
	    ycp::Return ($repositories->GetAllRepositories (MIRRORED_REPO_FILTER));
	} elsif ($path eq '.patches') {
	    ycp::Return (GetAllPatches ($arg));
	} elsif ($path eq '.patch.testing') {
	    ycp::Return (GetPatchStatus ($arg));
	} elsif ($path eq '.category_filter') {
	    ycp::Return (SecurityLevelFilterExists ($arg));
	} else {
	    UnsupportedPath (\$command, \$path);
	}
    } elsif ($command eq 'Write') {
	if ($path eq '.patch.testing') {
	    ycp::Return (ChangePatchStatus ($arg));
	} elsif ($path eq '.patches') {
	    ycp::Return (WritePatchFilters());
	} elsif ($path eq '.category_filter') {
	    ycp::Return (ChangeCategoryFilterStatus ($arg));
	} elsif ($path eq '.production_snapshot') {
	    # FIXME
	    ycp::Return (YCP_TRUE);
	} elsif ($path eq '.testing_snapshot') {
	    # FIXME
	    ycp::Return (YCP_TRUE);
	} else {
	    UnsupportedPath (\$command, \$path);
	}
    } elsif ($command eq 'Execute') {
	    UnsupportedPath (\$command, \$path);
	    ycp::Return (undef);
    # destructor
    } elsif ($command eq 'result') {
	y2milestone ('Bye bye...');
	last;
    } else {
	y2error ('Unknown SCR command: '.$command);
	ycp::Return (undef);
    }
}
# the main() loop

exit 0;
