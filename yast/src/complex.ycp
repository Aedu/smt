/**
 * File:	include/yep/complex.ycp
 * Package:	Configuration of yep
 * Summary:	
 * Authors:	Lukas Ocilka <locilka@suse.cz>
 *
 * $Id: complex.ycp 27914 2006-02-13 14:32:08Z locilka $
 */

{
    textdomain "yep";

    import "YEPData";
    import "Directory";
    import "String";
    import "Report";

    any log_view_ID = nil;

    /**
     * Function for logging in the LogView widget.
     *
     * @param string text to be logged
     */
    void LogThis (string text) {
	if (UI::WidgetExists (`id (log_view_ID)))
	    UI::ChangeWidget (`id (log_view_ID), `LastLine, text + "\n");
    }

    /**
     * Gets the current credentials and use them to download a /repo/repoindex.xml
     * from the NUUrl. Progress is written to the LogView identified by
     * ID got as a function parameter.
     *
     * @param any log_view widget ID
     */
    boolean CredentialsTest (any log_view) {
	log_view_ID = log_view;

	string user = YEPData::GetCredentials ("NUUser");
	string pass = YEPData::GetCredentials ("NUPass");
	string url  = YEPData::GetCredentials ("NUUrl");

	if (user == nil) user = "";
	if (pass == nil) pass = "";

	if (url == nil || url == "") {
	    // TRANSLATORS: error message
	    Report::Error (_("No URL has been defined. Test cannot proceed."));
	    return false;
	}

	// File for writing the credentials
	string test_file = Directory::tmpdir + "/curl_input_file";

	// File for downloading the /repo/repoindex.xml
	string out_file  = Directory::tmpdir + "/curl_output_file";

	// At first, credentials need to be written to a temporary file
	// because of security reasons. If used on a commandline, `ps`
	// could reveal them.

	// TRANSLATORS: LogView line
	LogThis (_("Creating a temporary file..."));

	integer cmd_exit = (integer) SCR::Execute (.target.bash, sformat ("echo \"# URL for downloading repos/patches
url=\\\"\\\"
# user:pass to be used for downloading
user=\\\"\\\"\" > '%1'", String::Quote (test_file)));

	if (cmd_exit != 0) {
	    // TRANSLATORS: LogView line
	    LogThis (sformat (_("Unable to create a temporary file %1."), test_file));

	    return false;
	}

	// TRANSLATORS: LogView line
	LogThis (_("Writing credentials to a temporary file..."));
	if (! (boolean) SCR::RegisterAgent (.curlTempFile, `ag_ini (`SysConfigFile (test_file)))) {
	    y2error ("Cannot register agent");
	    // TRANSLATORS: LogView line
	    LogThis (sformat(_("Cannot write to a temporary file %1."), test_file));

	    return false;
	}

	SCR::Read (add(.curlTempFile, "url"));
	SCR::Read (add(.curlTempFile, "user"));

	// NUUrl
	if (! (boolean) SCR::Write (add (.curlTempFile, "url"), sformat ("%1/repo/repoindex.xml", url)))
	    y2error ("Writing url failed");

	// NUUser and NUPass
	// user:pass, all ":" in user or pass need to be escaped
	string userpass = sformat (
		"%1:%2",
		mergestring (splitstring (user, ":"), "\\:"),
		mergestring (splitstring (pass, ":"), "\\:")
	);

	if (! (boolean) SCR::Write (add (.curlTempFile, "user"), userpass))
	    y2error ("Writing user failed");

	if (! (boolean) SCR::Write (.curlTempFile, nil)) {
	    y2error ("Cannot write credentials");
	    // TRANSLATORS: LogView line
	    LogThis (sformat(_("Cannot write to a temporary file %1."), test_file));

	    return false;
	}

	if (! (boolean) SCR::UnregisterAgent (.curlTempFile)) {
	    y2error ("Cannot unregister agent");
	}

	// TRANSLATORS: LogView line
	LogThis (_("Downloading list of available repositories..."));
	map cmd = (map) SCR::Execute (
	    .target.bash_output,
	    sformat ("/usr/bin/curl --silent --config '%1' > '%2'", String::Quote (test_file), String::Quote (out_file))
	);

	if (cmd["exit"]:-1 != 0) {
	    // TRANSLATORS: LogView line
	    LogThis (_("Unable to download list of repositories."));
	    if (cmd["stderr"]:"" != "") {
		// TRANSLATORS: LogView line
		LogThis (sformat (_("Reason: %1"), cmd["stderr"]:""));
	    }

	    return false;
	}

	// TRANSLATORS: LogView line
	LogThis (_("Checking list of downloaded repositories..."));
	cmd = (map) SCR::Execute (
	    .target.bash_output,
	    sformat ("/usr/bin/grep '<[\t ]*repo[\t ]' '%1'", String::Quote (out_file))
	);

	if (cmd["exit"]:-1 != 0) {
	    // TRANSLATORS: LogView line
	    LogThis (_("Unable to check the list of repositories"));

	    return false;
	}

	list <string> list_of_repos = splitstring (cmd["stdout"]:"", "\n");
	if (list_of_repos == nil || size (list_of_repos) == 0) {
	    // TRANSLATORS: LogView line
	    LogThis (_("No repositories were found."));

	    return false;
	}

	// TRANSLATORS: LogView line
	LogThis (_("Some repositories were found."));

	return true;
    }

//    boolean InstallRequiredPackages () {
//	import "PackageSystem";
//	PackageSystem::CheckAndInstallPackagesInteractive (["apache2", "sqlite3"]);
//    }
}
