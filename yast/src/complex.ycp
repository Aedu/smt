/**
 * File:	include/smt/complex.ycp
 * Package:	Configuration of smt
 * Summary:	Complex functions
 * Authors:	Lukas Ocilka <locilka@suse.cz>
 *
 * $Id: complex.ycp 27914 2006-02-13 14:32:08Z locilka $
 */

{
    textdomain "smt";

    import "SMTData";
    import "Directory";
    import "String";
    import "Report";

    any log_view_ID = nil;

    /**
     * Function for logging in the LogView widget.
     *
     * @param string text to be logged
     */
    void LogThis (string text) {
	if (UI::WidgetExists (`id (log_view_ID)))
	    UI::ChangeWidget (`id (log_view_ID), `LastLine, text + "\n");
    }

    /**
     * Gets the current credentials and use them to download a /repo/repoindex.xml
     * from the NUUrl. Progress is written to the LogView identified by
     * ID got as a function parameter.
     *
     * @param any log_view widget ID
     */
    boolean CredentialsTest (any log_view) {
	log_view_ID = log_view;

	string user = SMTData::GetCredentials ("NU", "NUUser");
	string pass = SMTData::GetCredentials ("NU", "NUPass");
	string url  = SMTData::GetCredentials ("NU", "NURegUrl");
        string api  = SMTData::GetCredentials ("NU", "ApiType");

	if (user == nil) user = "";
	if (pass == nil) pass = "";

	if (url == nil || url == "") {
	    // TRANSLATORS: error message
	    Report::Error (_("No URL has been defined. Test cannot proceed."));
	    return false;
	}

	// File for writing the credentials
	string test_file = Directory::tmpdir + "/curl_input_file";

	// File for downloading the /repo/repoindex.xml
	string out_file  = Directory::tmpdir + "/curl_output_file";

	// At first, credentials need to be written to a temporary file
	// because of security reasons. If used on a commandline, `ps`
	// could reveal them.

	// TRANSLATORS: LogView line
	LogThis (_("Creating a temporary file..."));

	integer cmd_exit = (integer) SCR::Execute (.target.bash, sformat ("echo \"[GLOBAL]
# URL for downloading repos/patches
url=%1?command=regdata&lang=en-US&version=1.0
# user/pass to be used for downloading
user=%2
pass=%3
apitype=%4
\" > '%5'", url, user, pass, api, String::Quote (test_file)));

	if (cmd_exit != 0) {
	    // TRANSLATORS: LogView line
	    LogThis (sformat (_("Cannot create a temporary file %1."), test_file));

	    return false;
	}


	// TRANSLATORS: LogView line
	LogThis (_("Check credentials..."));
	map cmd = (map) SCR::Execute (
	    .target.bash_output,
	    sformat ("/usr/lib/YaST2/bin/regsrv-check-creds '%1'", String::Quote (test_file))
	);

	if (cmd["exit"]:-1 != 0) {
	    // TRANSLATORS: LogView line
	    LogThis (_("Invalid credentials."));

	    return false;
	}

	// TRANSLATORS: LogView line
	LogThis (_("Success."));

	return true;
    }

//    boolean InstallRequiredPackages () {
//	import "PackageSystem";
//	PackageSystem::CheckAndInstallPackagesInteractive (["apache2", "sqlite3"]);
//    }
}
