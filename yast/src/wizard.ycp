/**
 * File:	clients/smt.ycp
 * Package:	Configuration of smt
 * Summary:	Definition of dialog sequences
 * Authors:	Lukas Ocilka <locilka@suse.cz>
 *
 * $Id: wizard.ycp 27914 2006-02-13 14:32:08Z locilka $
 *
 * Main file for smt configuration. Uses all other files.
 */

{
    textdomain "smt";

    import "CWMTab";
    import "Sequencer";
    import "CWM";
    import "Mode";
    import "CWMFirewallInterfaces";

    include "smt/helps.ycp";
    include "smt/dialogs.ycp";

    map <string, map <string, any> > widgets = $[
	    "cr" : $[
		"widget"	: `custom,
		"help"		: HELPS["credentials"]:"",
		"custom_widget"	: `Empty(),
		"handle"	: HandleCredentialsDialog,
		"init"		: InitCredentialsDialog,
		"store"		: StoreCredentialsDialog,
		"validate_type"	: `function,
		"validate_function"	: ValidateCredentialsDialog,
	    ],
	    "db" : $[
		"widget"	: `custom,
		"help"		: HELPS["database"]:"",
		"custom_widget"	: `Empty(),
		"validate_type"	: `function,
		"validate_function"	: ValidateDatabaseDialog,
		"init"		: InitDatabaseDialog,
		"store"		: StoreDatabaseDialog,
	    ],
	    "sd" : $[
		"widget"	: `custom,
		"help"		: HELPS["scheduled_downloads"]:"",
		"custom_widget"	: `Empty(),
		"handle"	: HandleScheduledDownloadsDialog,
		"init"		: InitScheduledDownloadsDialog,
		"store"		: StoreScheduledDownloadsDialog,
	    ],
	    "reporting" : $[
		"widget"	: `custom,
		"help"		: HELPS["reporting"]:"",
		"custom_widget"	: `Empty(),
		"handle"	: HandleReportEmailTableDialog,
		"init"		: InitReportEmailTableDialog,
		"store"		: StoreReportEmailTableDialog,
	    ],
	    "firewall" : CWMFirewallInterfaces::CreateOpenFirewallWidget ($[
		// renamed in SLES11
		"services" : [ "http", "https" ],
		"display_details" : false,
	    ]),
    ];

    map <string, any> tabs = $[
	    "credentials" : $[
		// TRANSLATORS: tab-header
		"header"	: _("Customer Center Access"),
		"widget_names"	: ["cr", "firewall"],
		"contents"	: CredentialsDialogContent(),
	    ],
	    "database" : $[
		// TRANSLATORS: tab-header
		"header"	: _("Database and Logging"),
		"widget_names"	: ["db", "reporting"],
		"contents"	:   `VBox (
					DatabaseDialogContent(),
					`VSpacing (1),
					ReportEmailTableContent(),
					`VStretch()
				    ),
	    ],
	    "scheduled_downloads" : $[
		// TRANSLATORS: tab-header
		"header"	: _("Scheduled NU Mirroring"),
		"widget_names"	: ["sd"],
		"contents"	: ScheduledDownloadsDialogContent(),
	    ],
    ];

    symbol InstallCredentialsDialog () {
	list<map<string,any> > w = CWM::CreateWidgets (tabs["credentials", "widget_names"]:[], widgets);
	term contents = CWM::PrepareDialog (tabs["credentials", "contents"]:`Empty(), w);
	string caption = sformat (_("SMT Configuration Wizard - Step %1/%2"), 1, 2);
	string help = CWM::MergeHelps (w);

	Wizard::SetContentsButtons (caption, contents, help,
	    Label::BackButton (), Label::NextButton ());
	return CWM::Run (w, $[]);
    }

    symbol InstallDatabaseDialog () {
	list<map<string,any> > w = CWM::CreateWidgets (tabs["database", "widget_names"]:[], widgets);
	term contents = CWM::PrepareDialog (tabs["database", "contents"]:`Empty(), w);
	string caption = sformat (_("SMT Configuration Wizard - Step %1/%2"), 2, 2);
	string help = CWM::MergeHelps (w);

	Wizard::SetContentsButtons (caption, contents, help,
	    Label::BackButton (), Label::NextButton ());
	return CWM::Run (w, $[]);
    }

    any MainSequence() {
	map <string, any> wd = $[
	    "tab" : CWMTab::CreateWidget ($[
		"tab_order"	: ["credentials", "database", "scheduled_downloads"],
		"tabs"		: tabs,
		"widget_descr"	: widgets,
		"initial_tab"	: "credentials",
	    ])
	];

	term contents = `VBox("tab");
	list <map <string, any> > w = CWM::CreateWidgets (["tab"], (map <string, map <string, any> >) wd);
	// TRANSLATORS: dialog caption
	string caption = _("NU Configuration");
	contents = CWM::PrepareDialog (contents, w);

	Wizard::SetContentsButtons (
	    caption,
	    contents,
	    "",
	    Label::BackButton (),
	    Label::FinishButton()
	);

	Wizard::SetTitleIcon("yast");

	return CWM::Run (w, $[`abort : ReallyExit]);
    }

    any MainInstallSequence() {
	map aliases = $[
	    "credentials" : ``( InstallCredentialsDialog() ),
	    "database" : ``( InstallDatabaseDialog() ),
	];

	map sequence = $[
	    "ws_start" : "credentials",
	    "credentials" : $[
		`abort      : `abort,
		`next       : "database",
	    ],
	    "database" : $[
		`abort      : `abort,
		`next       : `next,
	    ],
	];

	Wizard::SetTitleIcon ("yast");

	any ret = Sequencer::Run(aliases, sequence);

	return ret;
    }

    any SMTSequence () {
	map aliases = $[
	    "read"  : [ ``( ReadDialog() ), true ],
	    "main"  :   ``( MainSequence() ),
	    "write" : [ ``( WriteDialog() ), true ]
	];

	map sequence = $[
	    "ws_start" : "read",
	    "read" : $[
		`abort      : `abort,
		`next       : "main"
	    ],
	    "main" : $[
		`abort      : `abort,
		`next       : "write"
	    ],
	    "write" : $[
		`abort      : `abort,
		`next       : `next
	    ],
	];

	Wizard::CreateDialog();
	Wizard::SetTitleIcon ("yast");

	any ret = Sequencer::Run(aliases, sequence);
	Wizard::CloseDialog();

	return ret;
    }

    any SMTInstallSequence () {
	map aliases = $[
	    "read"  : [ ``( ReadDialog() ), true ],
	    "main"  :   ``( MainInstallSequence() ),
	    "write" : [ ``( WriteDialog() ), true ]
	];

	map sequence = $[
	    "ws_start" : "read",
	    "read" : $[
		`abort      : `abort,
		`next       : "main"
	    ],
	    "main" : $[
		`abort      : `abort,
		`next       : "write"
	    ],
	    "write" : $[
		`abort      : `abort,
		`next       : `next
	    ],
	];

	Wizard::SetTitleIcon ("yast");

	any ret = Sequencer::Run (aliases, sequence);

	return ret;
    }
}
