/**
 * File:	modules/YEPData.ycp
 * Package:	Configuration of yep
 * Summary:	YEP global data and functions
 * Authors:	Lukas Ocilka <locilka@suse.cz>
 *
 * $Id: YEPData.ycp 27914 2006-02-13 14:32:08Z locilka $
 */

{
    textdomain "yep";

    module "YEPData";

    import "Message";
    import "Service";
    import "Report";
    import "FileUtils";
    import "String";
    import "Label";

    map <string, string> NU_credentials = $[];

    // script entered into a crontab
    string cron_mirror_script = "/usr/bin/yep-mirror.pl";
    // cron 
    string path_to_cron = "/etc/cron.d/yast2-yep";

    string path_to_sync_script = "/usr/sbin/yep-ncc-sync";
    string user_for_sync_script = "root";

    list <map> yep_cron_settings = [];

    /**
     * Returns list of scheduled NU mirrorings.
     *
     * @return list <map>
     *
     * @struct [
     *   $[
     *     "command":"...",
     *     "day_of_month":"...",
     *     "day_of_week":"...",
     *     "hour":"...",
     *     "minute":"...",
     *     "month":"...",
     *     "user":"...",
     *   ],
     *   ...
     * ]
     */
    global list <map> GetCronSettings () {
	return yep_cron_settings;
    }

    /**
     * Adds new cron job.
     *
     * @param map new_cron_job
     *
     * @see GetCronSettings()
     */
    global void AddNewCronJob (map new_cron_job) {
	new_cron_job["user"] = user_for_sync_script;
	new_cron_job["command"] = path_to_sync_script;

	yep_cron_settings = add (yep_cron_settings, new_cron_job);
    }

    /**
     * Replaces the current cron job settings with new ones.
     *
     * @param integer cron_job_id (offset)
     * @param map new_settings
     *
     * @see GetCronSettings()
     */
    global void ReplaceCronJob (integer cron_job_id, map new_settings) {
	if (cron_job_id == nil || cron_job_id < 0) {
	    y2error ("Undefined offset: %1", cron_job_id);
	    return;
	}

	new_settings["user"] = user_for_sync_script;
	new_settings["command"] = path_to_sync_script;

	yep_cron_settings[cron_job_id] = new_settings;
    }

    /**
     * Removes a current cron job.
     *
     * @param integer cron_job_id (offset)
     *
     * @see GetCronSettings()
     */
    global void RemoveCronJob (integer cron_job_id) {
	if (cron_job_id == nil || cron_job_id < 0) {
	    y2error ("Undefined offset: %1", cron_job_id);
	    return;
	}

	yep_cron_settings = remove (yep_cron_settings, cron_job_id);
    }

    /**
     * Reads the current YEP credentials into the memory
     *
     * @return boolean if successful
     */
    global boolean ReadCredentials () {
	foreach (string one_entry, ["NUUser", "NUPass", "NUUrl"], {
	    NU_credentials[one_entry] = (string) SCR::Read (add (.yep_conf.value.NU, one_entry));
	});

	return true;
    }

    /**
     * Writes the current credentials to the YEP configuration file.
     *
     * @return boolean if successful
     */
    global boolean WriteCredentials () {
	boolean failed = false;

	foreach (string one_entry, ["NUUser", "NUPass", "NUUrl"], {
	    if (! (boolean) SCR::Write (add (.yep_conf.value.NU, one_entry), NU_credentials[one_entry]:"")) {
		y2error ("Cannot write to yep.conf:%1", one_entry);
		failed = true;
	    }
	});

	if (failed == false) {
	    if (! (boolean) SCR::Write (.yep_conf, nil)) {
		y2error ("Cannot write to yep.conf");
		failed = true;
	    }
	}

	return (failed == false);
    }

    /**
     * Returns value for credentials entry.
     *
     * @see SetCredentials
     *
     * @param string entry_name
     * @return string value
     */
    global string GetCredentials (string entry_name) {
	if (! haskey (NU_credentials, entry_name)) {
	    y2warning ("Key %1 not defined", entry_name);
	    return "";
	}

	return NU_credentials[entry_name]:"";
    }

    /**
     * Sets name/value credential pairs.
     *
     * @see GetCredentials
     *
     * @param string entry_name
     * @param string value
     */
    global void SetCredentials (string entry_name, string value) {
	NU_credentials[entry_name] = value;
    }

    /**
     * Function checks and adjusts the apache configuration
     * to be usable by YEP.
     *
     * @return boolean if successful
     */
    global boolean CheckAndAdjustApacheConfiguration () {
	string apache_conf_file = "/etc/sysconfig/apache2";

	boolean apache_conf_changed = false;

	if (! (boolean) SCR::RegisterAgent (.http_server_conf, `ag_ini (`SysConfigFile (apache_conf_file)))) {
	    y2error ("Cannot register agent");
	    Message::CannotWriteSettingsTo (apache_conf_file);
	    return false;
	}

	// "perl" in /etc/sysconfig/apache2:APACHE_MODULES
	string ap_modules = (string) SCR::Read (.http_server_conf.APACHE_MODULES);
	string ap_modules_old = ap_modules;

	list <string> ap_modules_l = splitstring (ap_modules, " \t");
	ap_modules_l = filter (string one_ap_module, ap_modules_l, {
	    return (one_ap_module != nil && one_ap_module != "");
	});
	ap_modules_l = toset ((list <string>) union (ap_modules_l, ["perl"]));
	ap_modules = mergestring (ap_modules_l, " ");

	if (ap_modules != ap_modules_old) {
	    y2milestone ("Writing APACHE_MODULES");
	    SCR::Write (.http_server_conf.APACHE_MODULES, ap_modules);
	    apache_conf_changed = true;
	}

	// SSL in /etc/sysconfig/apache2:APACHE_SERVER_FLAGS
	string ap_serflag = (string) SCR::Read (.http_server_conf.APACHE_SERVER_FLAGS);
	string ap_serflag_old = ap_serflag;

	list <string> ap_serflag_l = splitstring (ap_serflag, " \t");
	ap_serflag_l = filter (string one_ap_serflag, ap_serflag_l, {
	    return (one_ap_serflag != nil && one_ap_serflag != "");
	});
	ap_serflag_l = toset ((list <string>) union (ap_serflag_l, ["SSL"]));
	ap_serflag = mergestring (ap_serflag_l, " ");

	if (ap_serflag != ap_serflag_old) {
	    y2milestone ("Writing APACHE_SERVER_FLAGS");
	    SCR::Write (.http_server_conf.APACHE_SERVER_FLAGS, ap_serflag);
	    apache_conf_changed = true;
	}

	// Something has been changed
	// Apache conf needs writing
	// and Apache service needs restarting
	if (apache_conf_changed) {
	    y2milestone ("Writing sysconfig/apache conf");
	    if (! (boolean) SCR::Write (.http_server_conf, nil)) {
		y2error ("Cannot write apache2 conf");
		Message::CannotWriteSettingsTo (apache_conf_file);
		return false;
	    }

	    if (! Service::Reload ("apache2")) {
		y2error ("Reloading apache2 failed");
		// TRANSLATORS: error message, %1 is replaced with a service-name
		Report::Error (sformat (_("Reloading service has %1 failed."), "apache2"));
		return false;
	    }
	}

	if (! (boolean) SCR::UnregisterAgent (.http_server_conf)) {
	    y2error ("Cannot unregister agent");
	}

	// Enabling the Apache service
	if (! Service::Enabled ("apache2")) {
	    Service::Enable ("apache2");
	} else {
	    y2milestone ("Service already enabled, skipping ...");
	}

	return true;
    }

    global boolean RunSmallSync () {
	if (! FileUtils::Exists (path_to_sync_script)) {
	    y2error ("Sync script doesn't exist");
	    Report::Error (sformat (_("Synchronization script %1 does not exist.

Please, check your YEP installation."), path_to_sync_script));
	    return false;
	}

	map cmd_out = (map) SCR::Execute (.target.bash_output, path_to_sync_script);
	if (cmd_out["exit"]:-1 != 0) {
	    UI::OpenDialog (
		`HBox (
		    `VSpacing (19),
		    `VBox (
			`HSpacing (70),
			`Left (`Label (_("Running the synchronization script failed."))),
			`RichText (
			    `opt (`hstretch, `vstretch),
			    sformat (_("<p><b>Details:</b></p>
<p><b>stdout:</b> %1</p>
<p><b>stderr:</b> %2</p>"), cmd_out["stdout"]:"", cmd_out["stderr"]:"")
			),
			`PushButton (`id (`ok), `opt(`default), Label::OKButton())
		    )
		)
	    );
	    UI::UserInput();
	    UI::CloseDialog();
	}

	return true;
    }

    global void ReadCronSettings () {
	if (! FileUtils::Exists (path_to_cron)) {
	    y2milestone ("Creating file %1", path_to_cron);
	    map cmd = (map) SCR::Execute (.target.bash_output, sformat ("touch '%1'", String::Quote (path_to_cron)));

	    if (cmd["exit"]:-1 != 0) {
		y2error ("Cannot create file %1: %2", path_to_cron, cmd);
	    }
	}

	yep_cron_settings = (list <map>) SCR::Read (.yep_cron);
    }

    global boolean WriteCronSettings () {
	string service_name = "cron";

	if (! (boolean) SCR::Write (.yep_cron, yep_cron_settings)) {
	    y2error ("Writing cron failed");
	    Report::Error (_("Cannot write cron settings."));
	    return false;
	}

	if (size (yep_cron_settings) > 0) {
	    if (! Service::Enabled (service_name)) {
		Service::Enable (service_name);
	    } else {
		y2milestone ("Service cron already enabled, skipping ...");
	    }
	}

	if (! Service::Restart (service_name)) {
	    y2error ("Reloading %1 failed", service_name);
	    // TRANSLATORS: error message, %1 is replaced with a service-name
	    Report::Error (sformat (_("Reloading service has %1 failed."), service_name));
	    return false;
	}

	return true;
    }
}
