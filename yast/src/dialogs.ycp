/**
 * File:	include/smt/dialogs.ycp
 * Package:	Configuration of smt
 * Summary:	Dialogs definitions
 * Authors:	Lukas Ocilka <locilka@suse.cz>
 *
 * $Id: dialogs.ycp 27914 2006-02-13 14:32:08Z locilka $
 */

{
    textdomain "smt";

    include "smt/helps.ycp";
    include "smt/complex.ycp";

    import "Wizard";
    import "Popup";
    import "SMTData";
    import "Label";
    import "Confirm";
    import "Progress";
    import "Message";
    import "PackageSystem";
    import "Label";
    import "RunlevelEd";
    import "SuSEFirewall";

    integer sl = 100;

    map <string, string> smt_cron_scripts = $[
	"/usr/lib/SMT/bin/smt-repeated-register"	: _("NCC Registration"),
	"/usr/lib/SMT/bin/smt-daily"			: _("Synchronization of Updates"),
	"/usr/lib/SMT/bin/smt-gen-report"		: _("Generation of Reports"),
    ];

    term CredentialsDialogContent () {
	return `HBox (
		`HStretch(),
		`HSquash (
		    `VBox (
			`VWeight(2, `VStretch()),
			// TRANSLATORS: check box
			`Left (`CheckBox (`id ("enable_smt_service"), _("&Enable Subscription Management Tool Service (SMT)"))),
			`Left ("firewall"),

			`VWeight(1, `VStretch()),

			`Left (`Frame (_("NCC Mirroring Credentials"), (`VBox (
			    `HSquash (`MinWidth (
				25,
				// TRANSLATORS: text entry (User name)
				`InputField (`id ("NUUser"), _("&User"))
			    )),
			    `HSquash (`MinWidth (
				25,
				// TRANSLATORS: password entry
				`Password (`id ("NUPass"), _("&Password"))
			    )),
			    `VSpacing (1),
			    // TRANSLATORS: push button
			    `PushButton (`id ("test_NU_credentials"), `opt(`key_F6), _("&Test..."))
			)))),

			`VWeight(1, `VStretch()),

			`Left (`HSquash (`MinWidth (
			    45,
			    // TRANSLATORS: text entry (e-mail)
			    `InputField (`id ("nccEmail"), _("&NCC E-mail Used for Registration"))
			))),

			`Left (`HSquash (`MinWidth (
			    45,
			    // TRANSLATORS: text entry (URL)
			    `InputField (`id ("url"), _("&Your SMT Server URL"))
			))),

			`VWeight(1, `VStretch()),

			`VWeight(2, `VStretch())
		    )
		),
		`HStretch()
	    );
    }

    term DatabaseDialogContent () {
	return `HBox (
	    `HStretch(),
	    `HSquash (
		`VBox (
		    `VStretch(),

		    `Left (`HSquash (`MinWidth (
			32,
			// TRANSLATORS: password entry
			`Password (`id ("DB-password-1"), _("Database &Password"))
		    ))),
		    `Left (`HSquash (`MinWidth (
			32,
			// TRANSLATORS: password entry
			`Password (`id ("DB-password-2"), _("C&onfirm Password"))
		    ))),
		    
		    `VStretch()
		)
	    ),
	    `HStretch()
	);
    }

    term ScheduledDownloadsDialogContent () {
	return `VBox (
	    `Left(`Label (_("List of Scheduled Jobs"))),
	    `Table (
		`id ("scheduled_NU_mirroring"),
		`opt (`vstretch),
		`header (
		    _("Job to Run"),
		    // TRANSLATORS: table header item
		    _("Frequency"),
		    // TRANSLATORS: table header item
		    _("Day of the Week"),
		    // TRANSLATORS: table header item
		    _("Day of the Month"),
		    // TRANSLATORS: table header item
		    _("Hour"),
		    // TRANSLATORS: table header item
		    _("Minute")
		),
		[]
	    ),
	    `Left (`HBox (
		`PushButton (`id (`add),	`opt(`key_F3), _("&Add...")),
		`PushButton (`id (`edit),	`opt(`key_F4), _("&Edit...")),
		`PushButton (`id (`delete),	`opt(`key_F5), Label::DeleteButton())
	    ))
	);
    }

    term ReportEmailTableContent () {
	return `HBox (
	    `HStretch (),
	    `HSquash (`MinWidth( 40, `VBox (
		`Table (
		    `id (`report_table),
		    `header (
			_("E-mail addresses to send reports to")
		    ),
		    []
		),
		`Left (
		    `HBox (
			`PushButton (`id (`add), _("&Add...")),
			`PushButton (`id (`edit), Label::EditButton()),
			`PushButton (`id (`delete), Label::DeleteButton())
		    )
		)
	    ))),
	    `HStretch()
	);
    }

    term CatalogsTableContent () {
	return `VBox (
	    `Table (
		`id (`catalogs_table),
		`opt (`hstretch, `vstretch),
		`header (
		    _("Name"),
		    _("Target"),
		    _("Mirroring"),
		    _("Staging"),
		    _("Description")
		),
		[]
	    ),
	    `Left (
		`HBox (
		    `PushButton (`id (`toggle_mirroring), _("Toggle &Mirroring")),
		    `PushButton (`id (`toggle_staging), _("Toggle &Staging"))
		)
	    )
	);
    }

    symbol ReadDialog() {
	// Checking for root's permissions
	if (!Confirm::MustBeRoot())
	    return `abort;

	Progress::New (
	    // TRANSLATORS: Dialog caption
	    _("Initializing SMT Configuration"),
	    " ",
	    4,
	    [
		// TRANSLATORS: Progress stage
		_("Read SMT configuration"),
		// TRANSLATORS: Progress stage
		_("Read SMT status"),
		// TRANSLATORS: Progress stage
		_("Read firewall settings"),
		// TRANSLATORS: Progress stage
		_("Read cron settings"),
	    ],
	    [
		// TRANSLATORS: Bussy message /progress/
		_("Reading SMT configuration..."),
		// TRANSLATORS: Bussy message /progress/
		_("Reading SMT status..."),
		// TRANSLATORS: Bussy message /progress/
		_("Reading firewall settings..."),
		// TRANSLATORS: Bussy message /progress/
		_("Reading cron settings..."),
		Message::Finished(),
	    ],
	    ""
	);
	Wizard::SetTitleIcon("yast-smt");
	Wizard::RestoreHelp(HELPS["read"]:"");

	Progress::NextStage();
	sleep (sl);

	SMTData::ReadCredentials();
	SMTData::ReadFirstRun();
	SMTData::StorePasswordTMP();

	Progress::NextStage();
	sleep (sl);

	boolean orig = Progress::set (false);
	RunlevelEd::Read();
	Progress::set (orig);

	SMTData::ReadSMTServiceStatus();

	Progress::NextStage();
	sleep (sl);

	orig = Progress::set (false);
	SuSEFirewall::Read();
	Progress::set (orig);

	Progress::NextStage();
	sleep (sl);

	SMTData::ReadCronSettings();
	SMTData::CronRandomize();

	Progress::NextStage();
	sleep (sl);

	Progress::Finish();

	return `next;
    }

    symbol RegisterOrFillUpCredentials () {
	Wizard::SetContents (
	    // Dialog caption
	    _("NCC Credentials"),
	    `HSquash (`VBox (
		// Informative text
		`Label (_("System does not appear to be registered in NCC.
Choose one of the options below.")),
		`VSpacing (1),
		`RadioButtonGroup (
		    `id ("NCCCredentialsRBB"),
		    `opt (`notify),
		    `HBox (
			`HSpacing (2),
			`VBox (
			    // Radio button
			    `Left (`RadioButton (`id ("skip"),		`opt (`notify), _("&Skip Registration"))),
			    `VSpacing (1),
			    // Radio button
			    `Left (`RadioButton (`id ("registration"),	`opt (`notify), _("Register in &Novell Customer Center"))),
			    `VSpacing (1),
			    // Radio button
			    `Left (`RadioButton (`id ("generate"),	`opt (`notify), _("&Generate New NCC Credentials"))),
			    `VSpacing (1)
			)
		    )
		)
	    )),
	    // Help "NCC Credentials", #1
	    _("<p><b><big>NCC Credentials</big></b><br>
You need to register your SMT in Novell Customer Center to get it working
properly. Choose one of the listed options.</p>") +
	    // Help "NCC Credentials", #2
	    _("<p>Choosing <b>Register in Novell Customer Center</b> would
call regular Novell Customer Center Configuration module,
<b>Generate New NCC Credentials</b> just creates new NCC Credentials
file without calling Novell Customer Center Configuration module.</p>"),
	    true,
	    true
	);
	Wizard::SetTitleIcon ("registration");

	any dialog_ret = nil;
	symbol ret = `next;

	// Initial dialog settings
	string decision = "registration";
	UI::ChangeWidget (`id ("NCCCredentialsRBB"), `CurrentButton, decision);

	while (true) {
	    dialog_ret = UI::UserInput();

	    if (dialog_ret == `next) {
		decision = (string) UI::QueryWidget (`id ("NCCCredentialsRBB"), `CurrentButton);
		y2milestone ("User decision: %1", decision);
		if (decision == "skip") {
		    if (Popup::AnyQuestion (
			// Pop-up dialog caption
			_("Warning"),
			// Pop-up question
			_("Leaving the NCC credentials empty might cause SMT not to work properly.
Are you sure you want to really skip it?"),
			// Button label
			_("&Yes, Skip It"),
			// Button label
			_("&Cancel"),
			`focus_no
		    )) {
			y2warning ("User decided to skip registration or entering NCC credentials");
			ret = `next;
		    } else {
			continue;
		    }
		} else if (decision == "registration") {
		    any wfmret = WFM::CallFunction ("inst_suse_register");
		    y2milestone ("inst_suse_register returned: %1", wfmret);
		    ret = `again;
		} else if (decision == "generate") {
		    // Busy message
		    boolean dopen = (boolean) UI::OpenDialog (`Label (_("Generating NCCcredentials...")));
		    any check_ret = WFM::CallFunction ("smt_generate_new_credentials");
		    if (dopen == true) UI::CloseDialog();
		    if (check_ret == nil) {
			// Error pop-up, %1 is replaced with a script name
			Report::Error (sformat(_("Unable to generate new NCCcredentials,
An error occured while calling %1"), "smt_generate_new_credentials"));
			continue;
		    }
		}
		break;
	    } else if (dialog_ret == `back) {
		ret = `back;
		break;
	    } else if (dialog_ret == "skip" || dialog_ret == "registration" || dialog_ret == "generate") {
		decision = (string) UI::QueryWidget (`id ("NCCCredentialsRBB"), `CurrentButton);
	    } else if (dialog_ret == `abort || dialog_ret == `cancel) {
		if (Popup::ReallyAbort (true)) {
		    ret = `abort;
		    break;
		}
	    } else {
		y2error ("Unknown user input: %1", dialog_ret);
	    }
	}

	return ret;
    }

    // FATE #305541, Check if NCCcredentials file exists and offer registration
    // or creating the file if it doesn't
    symbol CheckConfigDialog () {
	// defualt dialog return
	symbol dialog_ret = `next;

	if (SMTData::GetSMTServiceStatus () != true) {
	    y2milestone ("SMT Service is not enabled, not checking the config");
	    return dialog_ret;
	}

	while (SMTData::SystemIsRegistered() != true) {
	    y2warning ("No NCCcredentials present, offering registration, etc.");
	    dialog_ret = RegisterOrFillUpCredentials();
	    y2milestone ("Dialog ret: %1", dialog_ret);

	    if (dialog_ret == `abort || dialog_ret == `back || dialog_ret == `next) {
		break;
	    }
	}

	// Check succeeded after some iterations...
	if (dialog_ret == `again) {
	    dialog_ret = `next;
	// Aborted? Skip the other tests
	} else if (dialog_ret == `abort) {
	    return dialog_ret;
	}

	if (SMTData::CheckAndAdjustCredentialsFileAccess() != true) {
	    Report::Error (sformat (
		// Pop-up error message, %1 is replaced with file name, %2 with username
		_("SMT is unable to set %1 file permissions
to be readable by %2 user."),
		SMTData::GetNCCcredentialsFile(),
		SMTData::GetCredentials ("DB", "user")
	    ));
	}

	return dialog_ret;
    }

    symbol WriteDialog() {
	Progress::New (
	    // TRANSLATORS: Dialog caption
	    _("Writing SMT Configuration"),
	    " ",
	    8,
	    [
		// TRANSLATORS: Progress stage
		_("Adjust SMT configuration"),
		// TRANSLATORS: Progress stage
		_("Adjust database configuration"),
		// TRANSLATORS: Progress stage
		_("Check and install server certificate"),
		// TRANSLATORS: Progress stage
		_("Adjust Web-server configuration"),
		// TRANSLATORS: Progress stage
		_("Adjust SMT service"),
		// TRANSLATORS: Progress stage
		_("Write firewall settings"),
		// TRANSLATORS: Progress stage
		_("Write cron settings"),
		// TRANSLATORS: Progress stage
		_("Run synchronization check"),
	    ],
	    [
		// TRANSLATORS: Bussy message /progress/
		_("Adjusting SMT configuration..."),
		// TRANSLATORS: Bussy message /progress/
		_("Adjusting database configuration..."),
		// TRANSLATORS: Bussy message /progress/
		_("Checking and installing server certificate..."),
		// TRANSLATORS: Bussy message /progress/
		_("Adjusting Web server configuration..."),
		// TRANSLATORS: Bussy message /progress/
		_("Adjusting SMT service..."),
		// TRANSLATORS: Bussy message /progress/
		_("Writing firewall settings..."),
		// TRANSLATORS: Bussy message /progress/
		_("Writing cron settings..."),
		// TRANSLATORS: Bussy message /progress/
		_("Running synchronization check..."),
		Message::Finished(),
	    ],
	    ""
	);
	Wizard::SetTitleIcon("yast-smt");
	Wizard::RestoreHelp(HELPS["write"]:"");

	SMTData::WriteCredentials();

	Progress::NextStage();
	sleep (sl);

	Progress::NextStage();
	sleep (sl);

	// uses credentials
	SMTData::StartDatabaseIfNeeded();
	SMTData::WriteDatabaseSettings();
	SMTData::ChangePasswordIfDifferent();

	Progress::NextStage();
	sleep (sl);

	SMTData::WriteCASettings();

	Progress::NextStage();
	sleep (sl);

	SMTData::CheckAndAdjustApacheConfiguration();

	Progress::NextStage();
	sleep (sl);

	SMTData::WriteSMTServiceStatus();

	Progress::NextStage();
	sleep (sl);

	boolean orig = Progress::set (false);
	SuSEFirewall::Write();
	Progress::set (orig);

	Progress::NextStage();
	sleep (sl);

	SMTData::WriteCronSettings();

	Progress::NextStage();
	sleep (sl);

	SMTData::WriteFirstRunStatus();
	sleep (sl);

	Progress::NextStage();

	if (SMTData::GetSMTServiceStatus() == true) {
	    SMTData::RunSmallSync();
	}

	Progress::Finish();

	return `next;
    }

    void InitCredentialsDialog (string id) {
	foreach (string one_entry, ["NUUser", "NUPass"], {
	    string value = SMTData::GetCredentials ("NU", one_entry);
	    if (value == nil) value = "";
	    UI::ChangeWidget (`id (one_entry), `Value, value);
	});

	foreach (string one_entry, ["nccEmail", "url"], {
	    string value = SMTData::GetCredentials ("LOCAL", one_entry);
	    if (value == nil) value = "";
	    UI::ChangeWidget (`id (one_entry), `Value, value);
	});

	if (SMTData::GetCredentials ("LOCAL", "url") == "") {
	    map cmd_out = (map) SCR::Execute (.target.bash_output, "/bin/hostname --fqdn");

	    if (cmd_out["exit"]:-1 == 0 && size (cmd_out["stdout"]:"") > 0) {
		string value = splitstring (cmd_out["stdout"]:"", "\n")[0]:"";

		if (size (value) > 0) {
		    value = sformat ("http://%1/", value);
		    UI::ChangeWidget (`id ("url"), `Value, value);
		}
	    }
	}

	UI::ChangeWidget (`id ("enable_smt_service"), `Value, SMTData::GetSMTServiceStatus());
    }

    void StoreCredentialsDialog (string id, map event) {
	foreach (string one_entry, ["NUUser", "NUPass"], {
	    SMTData::SetCredentials ("NU", one_entry, (string) UI::QueryWidget (`id (one_entry), `Value));
	});

	foreach (string one_entry, ["nccEmail", "url"], {
	    SMTData::SetCredentials ("LOCAL", one_entry, (string) UI::QueryWidget (`id (one_entry), `Value));
	});

	boolean new_service_status = (boolean) UI::QueryWidget (`id ("enable_smt_service"), `Value);
	y2milestone ("New SMT status: %1", (new_service_status == true ? "enabled":"disabled"));
	SMTData::SetSMTServiceStatus (new_service_status);
    }

    void InitDatabaseDialog (string id) {
	string value = SMTData::GetCredentials ("DB", "pass");
	if (value == nil) value = "";

	// bnc #390085
	UI::ChangeWidget (`id ("DB-password-1"), `Label,
	    sformat ("Database Password for %1 User", SMTData::GetCredentials ("DB", "user"))
	);
	UI::ChangeWidget (`id ("DB-password-2"), `Label,
	    sformat ("Database Password for %1 User Once Again", SMTData::GetCredentials ("DB", "user"))
	);

	UI::ChangeWidget (`id ("DB-password-1"), `Value, value);
	UI::ChangeWidget (`id ("DB-password-2"), `Value, value);
    }

    void StoreDatabaseDialog (string id, map event) {
	SMTData::SetCredentials ("DB", "pass", (string) UI::QueryWidget (`id ("DB-password-1"), `Value));
    }

    boolean ValidateDatabaseDialog (string id, map event) {
	string pass_1 = (string) UI::QueryWidget (`id ("DB-password-1"), `Value);
	string pass_2 = (string) UI::QueryWidget (`id ("DB-password-2"), `Value);

	if (pass_1 != pass_2) {
	    UI::SetFocus (`id ("DB-password-1"));
	    // TRANSLATORS: error report
	    Report::Error (_("The first and the second password do not match."));
	    return false;
	}

	// pass_1 and pass_2 are equal
	if (pass_1 == nil || pass_1 == "") {
	    UI::SetFocus (`id ("DB-password-1"));
	    // TRANSLATORS: error report, actually containing a question
	    if (! Popup::ContinueCancel (_("Password should not be empty.

Would you like to continue nevertheless?")))
		return false;
	}

	y2milestone ("Password validation passed");
	return true;
    }

    boolean ValidateCredentialsDialog (string id, map event) {
	string url = (string) UI::QueryWidget (`id ("url"), `Value);
	if (url == nil || url == "") {
	    UI::SetFocus (`id ("url"));
	    // Pop-up error message
	    Report::Error (_("The SMT URL must not be empty.

Enter your SMT server URL in the following format: http:://server.name/
"));
	    return false;
	}

	string nuuser = (string) UI::QueryWidget (`id ("NUUser"), `Value);
	if (nuuser == nil || nuuser == "") {
	    UI::SetFocus (`id ("NUUser"));
	    // Pop-up error message
	    Report::Error (_("NU User must not be empty."));
	    return false;
	}

	string nupass = (string) UI::QueryWidget (`id ("NUPass"), `Value);
	if (nupass == nil || nupass == "") {
	    UI::SetFocus (`id ("NUPass"));
	    // Pop-up error message
	    Report::Error (_("NU Password must not be empty."));
	    return false;
	}

	return true;
    }

    boolean TestCredentials () {
	UI::OpenDialog (`MinSize (52, 12, `VBox (
	    // TRANSLATORS: LogView label
	    `LogView (`id ("test_log"), _("&Test Details"), 5, 100),
	    `VSpacing (1),
	    `PushButton (`id (`ok), `opt (`default, `key_F10), Label::OKButton())
	)));

	// complex.ycp
	boolean ret = CredentialsTest ("test_log");

	if (ret == true) {
	    // TRANSLATORS: LogView line
	    UI::ChangeWidget (`id ("test_log"), `LastLine, "\n" + _("Test result: success") + "\n");
	} else {
	    // TRANSLATORS: LogView line
	    UI::ChangeWidget (`id ("test_log"), `LastLine, "\n" + _("Test result: failure") + "\n");
	}

	UI::UserInput();
	UI::CloseDialog();

	return ret;
    }

    symbol HandleCredentialsDialog (string id, map event) {
	any action = event["ID"]:nil;

	if (action == "test_NU_credentials") {
	    StoreCredentialsDialog (id, event);
	    TestCredentials();
	}

	return nil;
    }

    list <string> report_e_mails = [];

    void InitReportEmails () {
	string reportEmail = SMTData::GetCredentials ("REPORT", "reportEmail");

	if (reportEmail == nil) {
	    y2warning ("REPORT/reportEmail not defined yet");
	    reportEmail = "";
	}

	reportEmail = mergestring (splitstring (reportEmail, " \t"), "");
	report_e_mails = (list <string>) toset (
	    splitstring (reportEmail, ",")
	);
    }

    void StoreReportEmails () {
	SMTData::SetCredentials ("REPORT", "reportEmail", mergestring (report_e_mails, ","));
    }

    void RedrawReportEmailsTable () {
	list <term> items = maplist (string one_email, report_e_mails, {
	    return `item (`id (one_email), one_email);
	});

	UI::ChangeWidget (`id (`report_table), `Items, items);

	boolean edit_delete_stat = (size (items) > 0);
	UI::ChangeWidget (`id (`edit), `Enabled, edit_delete_stat);
	UI::ChangeWidget (`id (`delete), `Enabled, edit_delete_stat);
    }

    void InitReportEmailTableDialog (string id) {
	InitReportEmails();
	RedrawReportEmailsTable();
    }

    void StoreReportEmailTableDialog (string id, map event) {
	StoreReportEmails();
    }

    string yes = UI::Glyph (`CheckMark);
    // opposite to check-mark used in UI, usually not translated
    string no	= _("-");

    map <string, map <string, any> > catalogs_info = $[];

    void RedrawCatalogsTable () {
	catalogs_info = $[];

	// busy message
	boolean uio = (boolean) UI::OpenDialog (`Label (_("Getting list of the currently available catalogs...")));

	list <map <string, string> > catalogs_states = (list <map <string, string> >) SCR::Read (.smt.catalogs);
	if (catalogs_states == nil) {
	    y2error ("Error getting available catalogs");
	    catalogs_states = [];
	}

	boolean mirroring = nil;
	boolean staging = nil;

	list <term> items = maplist (map <string, string> one_catalog, catalogs_states, {
	    mirroring	= (one_catalog["mirroring"]:"" == "Yes");
	    staging	= (one_catalog["staging"]:"" == "Yes");

	    // used later in Handle* function
	    catalogs_info[one_catalog["id"]:""] = $[
		"mirroring"	: mirroring,
		"staging"	: staging,
		"name"		: one_catalog["name"]:"",
		// empty /--/ == no specific target
		"target"	: (regexpmatch (one_catalog["target"]:"", "^-+$") ? "" : one_catalog["target"]:""),
	    ];

	    return `item (
		`id (one_catalog["id"]:""),
		one_catalog["name"]:_("Unknown"),
		one_catalog["target"]:_("Unknown"),
		(mirroring ? yes : no),
		(staging ? yes : no),
		one_catalog["description"]:""
	    );
	});

	if (items == nil) items = [];

	if (uio == true) UI::CloseDialog();

	UI::ChangeWidget (`id (`catalogs_table), `Items, items);
    }

    void InitCatalogsTableDialog (string id) {
	RedrawCatalogsTable();
    }

//    void StoreCatalogsTableDialog (string id, map event) {
//    }

    boolean EmailValid (string e_mail) {
	// very simple e-mail validator
	return (regexpmatch (e_mail, ".+@.+\\..+"));
    }

    void HandleAddEditEmailAddress (string e_mail) {
	if (e_mail == nil) e_mail = "";

	UI::OpenDialog (
	    `VBox (
		`HSquash (`MinWidth (40, `InputField (`id ("e-mail"), (e_mail == "" ?
		    _("New &E-Mail")
		    :
		    _("Editing &E-Mail")
		), e_mail))),
		`HBox (
		    `PushButton (`id (`ok), `opt (`default, `key_F10), Label::OKButton()),
		    `HSpacing  (2),
		    `PushButton (`id (`cancel), `opt (`key_F9), Label::CancelButton())
		)
	    )
	);

	UI::SetFocus (`id ("e-mail"));

	any ret = nil;
	while (true) {
	    ret = UI::UserInput();

	    // Cancel pressed
	    if (ret != `ok)
		break;

	    // OK pressed
	    string new_mail = (string) UI::QueryWidget (`id ("e-mail"), `Value);

	    if (EmailValid (new_mail)) {
		report_e_mails = filter (string one_email, report_e_mails, { return one_email != e_mail; });
		report_e_mails = toset (add (report_e_mails, new_mail));
		break;
	    } else {
		Report::Error (sformat (_("E-mail '%1' is not valid."), new_mail));
		UI::SetFocus (`id ("e-mail"));
	    }
	}

	UI::CloseDialog();

	if (ret == `ok)
	    RedrawReportEmailsTable();
    }

    symbol HandleReportEmailTableDialog (string id, map event) {
	if (id != "reporting")
	    return nil;

	any event_id = event["ID"]:nil;

	if (event_id == `add) {
	    HandleAddEditEmailAddress ("");
	} else if (event_id == `edit) {
	    string currently_selected = (string) UI::QueryWidget (`id (`report_table), `CurrentItem);
	    HandleAddEditEmailAddress (currently_selected);
	} else if (event_id == `delete) {
	    string currently_selected = (string) UI::QueryWidget (`id (`report_table), `CurrentItem);
	    if (Confirm::Delete (currently_selected)) {
		report_e_mails = filter (string one_email, report_e_mails, { return one_email != currently_selected; });
		RedrawReportEmailsTable();
	    }
	}

	return nil;
    }

    boolean ToggleCatalog (string current_id, string entry) {
	if (current_id == nil) {
	    y2error ("Erroneous ID: %1", current_id);
	    // pop-up error message
	    Report::Error (_("Internal Error: Cannot toggle the current state."));
	    return nil;
	}

	boolean current_state = (boolean) catalogs_info[current_id, entry]:nil;

	if (current_state == nil) {
	    y2error ("Erroneous entry: %1 (%2)", catalogs_info[current_id]:$[], entry);
	    // pop-up error message
	    Report::Error (_("Internal Error: Cannot toggle the current state."));
	    return nil;
	}

	string selected_change = nil;
	integer col_to_change = 0;

	if (entry == "mirroring") {
	    selected_change = (current_state == true ? "--disable-mirror":"--enable-mirror");
	    col_to_change = 2;
	} else if (entry == "staging") {
	    selected_change = (current_state == true ? "--disable-staging":"--enable-staging");
	    col_to_change = 3;
	} else {
	    y2error ("Unknown entry to change: %1", entry);
	    // pop-up error message
	    Report::Error (_("Internal Error: Cannot toggle the current state."));
	    return nil;
	}

	string catalog_ident = nil;

	if (catalogs_info[current_id, "name"]:"" == nil) {
	    y2error ("Erroneous entry: %1 (no name)", catalogs_info[current_id]:$[]);
	    // pop-up error message
	    Report::Error (_("Internal Error: Cannot toggle the current state."));
	} else {
	    catalog_ident = sformat ("'%1'", String::Quote (catalogs_info[current_id, "name"]:""));
	}

	if (catalogs_info[current_id, "target"]:"" != "") {
	    catalog_ident = sformat ("%1 '%2'", catalog_ident, String::Quote (catalogs_info[current_id, "target"]:""));
	}

	string cmd = sformat ("LC_ALL=C /usr/sbin/smt-catalogs --batch-mode %1 %2",
	    selected_change,
	    catalog_ident
	);

	// bussy message
	boolean uio = UI::OpenDialog (`Label ("Toggling catalog state..."));

	boolean success = ((integer) SCR::Execute (.target.bash, cmd) == 0);
	y2milestone ("Running >%1< returned: %2", cmd, success);

	if (uio == true) UI::CloseDialog();

	if (success != true) {
	    Report::Error (_("Internal Error: Cannot toggle the current state."));
	} else {
	    // Switch the current state
	    current_state = ! current_state;
	    catalogs_info[current_id, entry] = current_state;
	    UI::ChangeWidget (`id(`catalogs_table), `Item (current_id, col_to_change), (current_state == true ? yes:no));
	}
    }

    symbol HandleCatalogsTableDialog (string id, map event) {
	if (id != "catalogs")
	    return nil;

	any event_id = event["ID"]:nil;

	string current_id = (string) UI::QueryWidget (`id (`catalogs_table), `CurrentItem);

	if (event_id == `toggle_mirroring) {
	    ToggleCatalog (current_id, "mirroring");
	} else if (event_id == `toggle_staging) {
	    ToggleCatalog (current_id, "staging");
	}

	// Catalog have been toggled, re-focus the table again
	UI::SetFocus (`id (`catalogs_table));
    }

    map <string, string> nrdays_to_names = $[
	"0" : _("Sunday"),
	"1" : _("Monday"),
	"2" : _("Tuesday"),
	"3" : _("Wednesday"),
	"4" : _("Thursday"),
	"5" : _("Friday"),
	"6" : _("Saturday"),
    ];

    string CutZeros (string with_zeros) {
	if (regexpmatch (with_zeros, "^0.+")) {
	    with_zeros = regexpsub (with_zeros, "^0(.+)", "\\1");
	}

	return with_zeros;
    }

    map CutPerriodicalSigns (map settings) {
	map tmp_settings = settings;

	foreach (string key, ["hour", "minute", "day_of_month", "day_of_month"], {
	    if (regexpmatch (settings[key]:"", "\\*/")) {
		settings[key] = regexpsub (settings[key]:"", "\\*/(.*)", "\\1");
	    }
	});

	if (tmp_settings != settings) {
	    y2milestone ("Periodicall settings changed %1 -> %2", tmp_settings, settings);
	}

	return settings;
    }

    string FindJobName (string command) {
	string ret = _("Unknown");

	foreach (string script_command, string script_name, smt_cron_scripts, {
	    if (regexpmatch (command, script_command)) {
		ret = script_name;
		break;
	    }
	});

	return ret;
    }

    string FindJobScript (string command) {
	string ret = "";

	foreach (string script_command, string script_name, smt_cron_scripts, {
	    if (regexpmatch (command, script_command)) {
		ret = script_command;
		break;
	    }
	});

	return ret;
    }

    /**
     * Redraws the table of currently scheduled NU mirrorings.
     */
    void RedrawScheduledMirroringTable () {
	list <term> items = [];

	integer counter = -1;
	foreach (map one_entry, SMTData::GetCronSettings(), {
	    counter = counter + 1;

	    if (one_entry == nil || one_entry == $[])
		return;

	    foreach (string key, ["day_of_month", "day_of_week", "hour", "minute", "month"], {
		if (one_entry[key]:nil == nil)
		    one_entry[key] = "*";
	    });

	    term item = `item (`id (counter));

	    item = add (item, FindJobName (one_entry["command"]:""));

	    // covers */15 - every 15 minutes/hours
	    boolean periodically = false;

	    // More often than 'daily'
	    if (regexpmatch (one_entry["hour"]:"", "\\*/") || regexpmatch (one_entry["minute"]:"", "\\*/")) {
		periodically = true;
		// Script-call period, used as a table item
		item = add (item, _("Periodically"));
		item = add (item, "--");
		item = add (item, "--");
	    // Monthly
	    } else if (one_entry["day_of_month"]:"*" != "*") {
		// Script-call period, used as a table item
		item = add (item, _("Monthly"));
		item = add (item, "--");
		item = add (item, one_entry["day_of_month"]:_("Undefined"));
	    // Weekly
	    } else if (one_entry["day_of_week"]:"*" != "*") {
	    // Script-call period, used as a table item
		item = add (item, _("Weekly"));
		item = add (item, nrdays_to_names[one_entry["day_of_week"]:""]:_("Undefined"));
		item = add (item, "--");
	    // Daily
	    } else {
		// Script-call period, used as a table item
		item = add (item, _("Daily"));
		item = add (item, "--");
		item = add (item, "--");
	    }

	    one_entry = CutPerriodicalSigns (one_entry);

	    if (periodically && one_entry["hour"]:"*" != "*" && one_entry["hour"]:"0" != "0") {
		item = add (item, sformat (_("Every %1 hours"), one_entry["hour"]:_("Undefined")));
	    } else if (periodically) {
		item = add (item, "--");
	    } else {
		item = add (item, one_entry["hour"]:_("Undefined"));
	    }

	    if (periodically && one_entry["minute"]:"*" != "*" && one_entry["minute"]:"0" != "0") {
		item = add (item, sformat (_("Every %1 minutes"), one_entry["minute"]:_("Undefined")));
	    } else if (periodically) {
		item = add (item, "--");
	    } else {
		item = add (item, one_entry["minute"]:_("Undefined"));
	    }

	    items = add (items, item);
	});

	if (items == nil) {
	    items = [];
	    y2error ("Erroneous items!");
	}
	UI::ChangeWidget (`id ("scheduled_NU_mirroring"), `Items, items);

	boolean buttons_enabled = (items != nil && size (items) != 0);
	UI::ChangeWidget (`id (`edit), `Enabled, buttons_enabled);
	UI::ChangeWidget (`id (`delete), `Enabled, buttons_enabled);
    }

    void DisableScheduledMirroringTable () {
	UI::ChangeWidget (`id ("scheduled_NU_mirroring"), `Enabled, false);
	UI::ChangeWidget (`id (`add), `Enabled, false);
	UI::ChangeWidget (`id (`edit), `Enabled, false);
	UI::ChangeWidget (`id (`delete), `Enabled, false);
    }

    boolean cron_rpms_checked = false;
    boolean cron_rpms_installed = nil;

    void InitScheduledDownloadsDialog (string id) {
	// Lazy check for cron but only once
	if (cron_rpms_checked != true) {
	    cron_rpms_checked = true;
	    cron_rpms_installed = PackageSystem::CheckAndInstallPackagesInteractive (["cron"]);
	    y2milestone ("cron RPM is installed: %1", cron_rpms_installed);
	}

	if (cron_rpms_installed != true) {
	    DisableScheduledMirroringTable();
	    // TRANSLATORS: informational message (Report::Message)
	    Report::Message (_("Scheduled jobs have been disabled due to missing packages.
To install the missing packages and set up the scheduled jobs,
you need to restart the YaST SMT Configuration module."));
	    return;
	}

	RedrawScheduledMirroringTable();
    }

    void AdjustAddEditDialogToFrequency () {
	symbol current_freq = (symbol) UI::QueryWidget (`id (`frequency), `Value);

	boolean day_of_week_available  = false;
	boolean day_of_month_available = false;

	if (current_freq == `weekly) {
	    day_of_week_available = true;
	} else if (current_freq == `monthly) {
	    day_of_month_available = true;
	}

	if (current_freq == `periodically) {
	    UI::ChangeWidget (`id ("hour"), `Label, _("Every H-th &Hour"));
	    UI::ChangeWidget (`id ("minute"), `Label, _("Every M-th &Minute"));
	} else {
	    UI::ChangeWidget (`id ("hour"), `Label, _("&Hour"));
	    UI::ChangeWidget (`id ("minute"), `Label, _("&Minute"));
	}

	UI::ChangeWidget (`id ("day_of_week"),  `Enabled, day_of_week_available);
	UI::ChangeWidget (`id ("day_of_month"), `Enabled, day_of_month_available);
    }

    /**
     * Validates and saves the cron entry.
     */
    boolean ValidateAndSaveScheduledMirroring (integer schd_id) {
	map settings = $[
	    "day_of_month"	: "*",
	    "day_of_week"	: "*",
	    "hour"		: "*",
	    "minute"		: "*",
	    "month"		: "*",
	    "command"		: "",
	];

	symbol current_freq = (symbol) UI::QueryWidget (`id (`frequency), `Value);

	string hour = tostring (UI::QueryWidget (`id ("hour"), `Value));
	string minute = tostring (UI::QueryWidget (`id ("minute"), `Value));
	string day_of_month = tostring (UI::QueryWidget (`id ("day_of_month"), `Value));
	string day_of_week = tostring (UI::QueryWidget (`id ("day_of_week"), `Value));

	settings["hour"] = CutZeros (hour);
	settings["minute"] = CutZeros (minute);

	// Periodical frequency needs to add "*/X" periodical sign
	if (current_freq == `periodically) {
	    if (settings["hour"]:"0" != "0" && settings["hour"]:"*" != "*") {
		settings["hour"] = sformat ("*/%1", settings["hour"]:"0");
	    } else {
		settings["hour"] = "*";
	    }
	    if (settings["minute"]:"0" != "0" && settings["minute"]:"*" != "*") {
		settings["minute"] = sformat ("*/%1", settings["minute"]:"0");
	    } else {
		settings["minute"] = "*";
	    }
	} else if (current_freq == `weekly) {
	    settings["day_of_week"] = day_of_week;
	} else if (current_freq == `monthly) {
	    settings["day_of_month"] = day_of_month;
	}

	string command = (string) UI::QueryWidget (`id (`job_to_run), `Value);
	settings["command"] = command;

	if (schd_id != nil && schd_id > -1) {
	    SMTData::ReplaceCronJob (schd_id, settings);
	} else {
	    SMTData::AddNewCronJob (settings);
	}

	return true;
    }

    /**
     * Opens up dialog for adding or editing a cron-job entry.
     *
     * @param integer schd_id offset ID in the list of current jobs
     *        -1 for adding a new entry
     */
    boolean AddEditScheduledMirroring (integer schd_id) {
	map settings = $[];
	boolean editing = false;
	boolean dialog_ret = false;

	if (schd_id != nil && schd_id > -1) {
	    settings = SMTData::GetCronSettings()[schd_id]:$[];
	    if (settings == nil) {
		y2error ("Wrong settings on offset %1: %2", schd_id, SMTData::GetCronSettings());
	    }
	    editing = true;
	}

	list <term> day_of_week = maplist (string dof_id, string dof_name, nrdays_to_names, {
	    return `item (`id (dof_id), dof_name, (settings["day_of_week"]:nil == dof_id));
	});

	symbol freqency_sel = `daily;

	// "*/15" - Every 15 minutes, hours
	if (regexpmatch (settings["hour"]:"", "\\*/") || regexpmatch (settings["minute"]:"", "\\*/")) {
	    freqency_sel = `periodically;
	    settings = CutPerriodicalSigns (settings);
	// Monthly
	} else if (settings["day_of_month"]:"*" != "*") {
	    freqency_sel = `monthly;
	// Weekly
	} else if (settings["day_of_week"]:"*" != "*") {
	    freqency_sel = `weekly;
	}

	if (settings["hour"]:nil == "*")
	    settings["hour"] = "0";

	if (settings["minute"]:nil == "*")
	    settings["minute"] = "0";

	if (settings["day_of_month"]:nil == "*")
	    settings["day_of_month"] = "0";

	integer hour		= tointeger (CutZeros (settings["hour"]:"0"));
	integer minute		= tointeger (CutZeros (settings["minute"]:"0"));
	integer day_of_month	= tointeger (CutZeros (settings["day_of_month"]:"0"));

	list <term> scripts = maplist (string script_command, string script_name, smt_cron_scripts, {
	    return `item (`id (script_command), script_name);
	});

	UI::OpenDialog (
	    `VBox (
		`HSpacing (35),
		`Left (`Heading ((editing ? _("Editing a SMT Scheduled Job"):_("Adding New SMT Scheduled Job")))),
		`VSpacing (1),
		`HBox (
		    `Left(`ComboBox (
			`id (`frequency),
			`opt (`notify),
			_("&Frequency"),
			[
			    `item (`id (`daily), _("Daily"), (freqency_sel == `daily)),
			    `item (`id (`weekly), _("Weekly"), (freqency_sel == `weekly)),
			    `item (`id (`monthly), _("Monthly"), (freqency_sel == `monthly)),
			    `item (`id (`periodically), _("Periodically"), (freqency_sel == `periodically))
			]
		    )),
		    `HSpacing (2),
		    `Left (`ComboBox (
			`id (`job_to_run),
			_("&Job to Run"),
			scripts
		    ))
		),
		`VSpacing (1),
		`Frame (
		    _("Job Start Time"),
		    `HBox (
			`HSpacing (2),
			`VBox (
			    `ComboBox (`id ("day_of_week"), `opt(`hstretch), _("Day of the &Week"), day_of_week),
			    `IntField (`id ("hour"), _("&Hour"), 0, 24, hour)
			),
			`HSpacing (2),
			`VBox (
			    `IntField (`id ("day_of_month"), _("&Day of the Month"), 1, 31, day_of_month),
			    `IntField (`id ("minute"), _("&Minute"), 0, 59, minute)
			),
			`HSpacing (2)
		    )
		),
		`VSpacing (1),
		`HBox (
		    `PushButton (`id (`ok), `opt (`default, `key_F10), (editing ? Label::OKButton():Label::AddButton())),
		    `HSpacing (2),
		    `PushButton (`id (`cancel), `opt (`key_F9), Label::CancelButton())
		)
	    )
	);

	AdjustAddEditDialogToFrequency();

	// select the right script if editing already entered cron job
	if (editing) {
	    string script = FindJobScript (settings["command"]:"");

	    if (script == "" || script == nil) {
		y2error ("Unable to determine script name %1", settings);
	    } else {
		UI::ChangeWidget (`id (`job_to_run), `Value, script);
	    }
	}

	any ret = nil;

	while (true) {
	    ret = UI::UserInput();

	    if (ret == `frequency) {
		AdjustAddEditDialogToFrequency();
	    } else if (ret == `ok || ret == `next) {
		if (! ValidateAndSaveScheduledMirroring (schd_id)) {
		    continue;
		} else {
		    dialog_ret = true;
		    break;
		}
	    } else if (ret == `cancel) {
		dialog_ret = false;
		break;
	    } else {
		y2error ("Unhandled ret: %1", ret);
	    }
	}

	UI::CloseDialog();

	return dialog_ret;
    }

    void SetFocusTable () {
	UI::SetFocus (`id ("scheduled_NU_mirroring"));
    }

    symbol HandleScheduledDownloadsDialog (string id, map event) {
	any action = event["ID"]:nil;

	boolean changed = false;

	// Add
	if (action == `add) {
	    changed = AddEditScheduledMirroring (-1);
	    SetFocusTable();

	// Edit
	} else if (action == `edit) {
	    integer current_item = (integer) UI::QueryWidget (`id ("scheduled_NU_mirroring"), `CurrentItem);
	    changed = AddEditScheduledMirroring (current_item);
	    SetFocusTable();

	// Delete
	} else if (action == `delete) {
	    integer current_item = (integer) UI::QueryWidget (`id ("scheduled_NU_mirroring"), `CurrentItem);

	    if (! Confirm::DeleteSelected()) {
		SetFocusTable();
		return nil;
	    }

	    SMTData::RemoveCronJob (current_item);
	    changed = true;
	    SetFocusTable();
	}

	if (changed) {
	    RedrawScheduledMirroringTable();
	}

	return nil;
    }

    void StoreScheduledDownloadsDialog (string id, map event) {
	return nil;
    }

    boolean ReallyExit () {
	// TRANSLATORS: yes-no popup
	return Popup::YesNo (_("Really exit?
All changes will be lost."));
    }
}
