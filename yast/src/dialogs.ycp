/**
 * File:	include/yep/dialogs.ycp
 * Package:	Configuration of yep
 * Summary:	Dialogs definitions
 * Authors:	Lukas Ocilka <locilka@suse.cz>
 *
 * $Id: dialogs.ycp 27914 2006-02-13 14:32:08Z locilka $
 */

{
    textdomain "yep";

    include "yep/helps.ycp";
    include "yep/complex.ycp";

    import "Wizard";
    import "Popup";
    import "YEPData";
    import "Label";
    import "Confirm";
    import "Progress";
    import "Message";

    integer sl = 200;

    term CredentialsDialogContent () {
	return `HBox (
		`HStretch(),
		`HSquash (`VBox (
		    `VStretch(),
		    `Left (`HSquash (`MinWidth (
			45,
			`TextEntry (`id ("NUUrl"), _("NU UR&L"))
		    ))),
		    `Left (`HSquash (`MinWidth (
			20,
			`TextEntry (`id ("NUUser"), _("NU &User"))
		    ))),
		    `Left (`HSquash (`MinWidth (
			20,
			`Password (`id ("NUPass"), _("NU &Password"))
		    ))),
		    `VSpacing (1),
		    `PushButton (`id ("test_NU_credentials"), `opt(`key_F6), _("&Test...")),
		    `VStretch()
		)),
		`HStretch()
	    );
    }

    term ScheduledDownloadsDialogContent () {
	return `VBox (
	    `Left(`Label (_("List of Scheduled NU Mirroring"))),
	    `Table (
		`id ("scheduled_NU_mirroring"),
		`opt (`vstretch),
		`header (
		    // TRANSLATORS: table header item
		    _("Frequency"),
		    // TRANSLATORS: table header item
		    _("Day of the Week"),
		    // TRANSLATORS: table header item
		    _("Day of the Month"),
		    // TRANSLATORS: table header item
		    _("Hour"),
		    // TRANSLATORS: table header item
		    _("Minute")
		),
		[]
	    ),
	    `Left (`HBox (
		`PushButton (`id (`add),	`opt(`key_F3), _("&Add...")),
		`PushButton (`id (`edit),	`opt(`key_F4), _("&Edit...")),
		`PushButton (`id (`delete),	`opt(`key_F5), Label::DeleteButton())
	    ))
	);
    }

    symbol ReadDialog() {
	// Checking for root's permissions
	if (!Confirm::MustBeRoot())
	    return `abort;

	Progress::New (
	    // TRANSLATORS: Dialog caption
	    _("Initializing YEP Configuration"),
	    " ",
	    2,
	    [
		// TRANSLATORS: Progress step
		_("Read YEP configuration"),
		// TRANSLATORS: Progress step
		_("Read cron settings"),
	    ],
	    [
		// TRANSLATORS: Progress step
		_("Reading YEP configuration..."),
		// TRANSLATORS: Progress step
		_("Reading cron settings..."),
		Message::Finished(),
	    ],
	    ""
	);
	Wizard::SetTitleIcon("yast");
	Wizard::RestoreHelp(HELPS["read"]:"");

	Progress::NextStage();
	sleep (sl);

	YEPData::ReadCredentials();

	Progress::NextStage();
	sleep (sl);

	YEPData::ReadCronSettings();

	Progress::NextStage();
	sleep (sl);

	Progress::Finish();

	return `next;
    }

    symbol WriteDialog() {
	Progress::New (
	    // TRANSLATORS: Dialog caption
	    _("Writing YEP Configuration"),
	    " ",
	    3,
	    [
		// TRANSLATORS: Progress step
		_("Adjust YEP configuration"),
		// TRANSLATORS: Progress step
		_("Adjust Web-server configuration"),
		// TRANSLATORS: Progress step
		_("Run synchronization check"),
	    ],
	    [
		// TRANSLATORS: Progress step
		_("Adjusting YEP configuration..."),
		// TRANSLATORS: Progress step
		_("Adjust Web-server configuration"),
		// TRANSLATORS: Progress step
		_("Running synchronization check..."),
		Message::Finished(),
	    ],
	    ""
	);
	Wizard::SetTitleIcon("yast");
	Wizard::RestoreHelp(HELPS["write"]:"");

	Progress::NextStage();
	sleep (sl);

	YEPData::WriteCredentials();

	Progress::NextStage();
	sleep (sl);

	YEPData::CheckAndAdjustApacheConfiguration();

	Progress::NextStage();
	sleep (sl);

	YEPData::RunSmallSync();

	Progress::NextStage();
	sleep (sl);

	Progress::Finish();

	return `next;
    }

    void InitCredentialsDialog (string id) {
	foreach (string one_entry, ["NUUrl", "NUUser", "NUPass"], {
	    string value = YEPData::GetCredentials (one_entry);
	    if (value == nil) value = "";
	    UI::ChangeWidget (`id (one_entry), `Value, value);
	});
    }

    void StoreCredentialsDialog (string id, map event) {
	foreach (string one_entry, ["NUUrl", "NUUser", "NUPass"], {
	    YEPData::SetCredentials (one_entry, (string) UI::QueryWidget (`id (one_entry), `Value));
	});
    }

    boolean TestCredentials () {
	UI::OpenDialog (`MinSize (52, 12, `VBox (
	    // TRANSLATORS: LogView label
	    `LogView (`id ("test_log"), _("&Test Details"), 5, 100),
	    `VSpacing (1),
	    `PushButton (`id (`ok), `opt (`default), Label::OKButton())
	)));

	// complex.ycp
	boolean ret = CredentialsTest ("test_log");

	if (ret == true) {
	    // TRANSLATORS: LogView line
	    UI::ChangeWidget (`id ("test_log"), `LastLine, "\n" + _("Test result: success") + "\n");
	} else {
	    // TRANSLATORS: LogView line
	    UI::ChangeWidget (`id ("test_log"), `LastLine, "\n" + _("Test result: failed") + "\n");
	}

	UI::UserInput();
	UI::CloseDialog();

	return ret;
    }

    symbol HandleCredentialsDialog (string id, map event) {
	any action = event["ID"]:nil;

	if (action == "test_NU_credentials") {
	    StoreCredentialsDialog (id, event);
	    TestCredentials();
	}

	return nil;
    }

    map <string, string> nrdays_to_names = $[
	"1" : _("Sunday"),
	"2" : _("Monday"),
	"3" : _("Tuesday"),
	"4" : _("Wednesday"),
	"5" : _("Thursday"),
	"6" : _("Friday"),
	"7" : _("Saturday"),
    ];

    /**
     * Redraws the table of currently scheduled NU mirrorings.
     */
    void RedrawScheduledMirroringTable () {
	list <term> items = [];

	foreach (map one_entry, YEPData::GetCronSettings(), {
	    if (one_entry == nil || one_entry == $[])
		return;
	    term item = `item();

	    // Monthly
	    if (one_entry["day_of_month"]:"*" != "*") {
		item = add (item, _("Monthly"));
		item = add (item, "--");
		item = add (item, one_entry["day_of_month"]:_("Undefined"));
	    // Weekly
	    } else if (one_entry["day_of_week"]:"*" != "*") {
		item = add (item, _("Weekly"));
		item = add (item, nrdays_to_names[one_entry["day_of_week"]:""]:_("Undefined"));
		item = add (item, "--");
	    // Daily
	    } else {
		item = add (item, _("Daily"));
		item = add (item, "--");
		item = add (item, "--");
	    }

	    item = add (item, one_entry["hour"]:_("Undefined"));
	    item = add (item, one_entry["minute"]:_("Undefined"));

	    items = add (items, item);
	});

	UI::ChangeWidget (`id ("scheduled_NU_mirroring"), `Items, items);

	boolean buttons_enabled = (items != nil && size (items) != 0);
	UI::ChangeWidget (`id (`add), `Enabled, buttons_enabled);
	UI::ChangeWidget (`id (`edit), `Enabled, buttons_enabled);
    }

    void InitScheduledDownloadsDialog (string id) {
	RedrawScheduledMirroringTable();
    }

    symbol HandleScheduledDownloadsDialog (string id, map event) {
	any action = event["ID"]:nil;

	if (action == `add) {
	    y2milestone ("Adding new scheduled mirroring...");
	} else if (action == `edit) {
	    y2milestone ("Editing a scheduled mirroring...");
	} else if (action == `delete) {
	    y2milestone ("Removing...");
	}

	return nil;
    }

    void StoreScheduledDownloadsDialog (string id, map event) {
	return nil;
    }

    boolean ReallyExit () {
	// TRANSLATORS: yes-no popup
	return Popup::YesNo (_("Really exit?
All changes will be lost."));
    }
}
