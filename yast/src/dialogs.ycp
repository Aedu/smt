/**
 * File:	include/yep/dialogs.ycp
 * Package:	Configuration of yep
 * Summary:	Dialogs definitions
 * Authors:	Lukas Ocilka <locilka@suse.cz>
 *
 * $Id: dialogs.ycp 27914 2006-02-13 14:32:08Z locilka $
 */

{
    textdomain "yep";

    include "yep/helps.ycp";
    include "yep/complex.ycp";

    import "Wizard";
    import "Popup";
    import "YEPData";
    import "Label";

    term CredentialsDialogContent () {
	return `HBox (
		`HStretch(),
		`HSquash (`VBox (
		    `VStretch(),
		    `Left (`HSquash (`MinWidth (
			45,
			`TextEntry (`id ("NUUrl"), _("NU URL"), YEPData::GetCredentials("NUUrl"))
		    ))),
		    `Left (`HSquash (`MinWidth (
			20,
			`TextEntry (`id ("NUUser"), _("NU User"), YEPData::GetCredentials("NUUser"))
		    ))),
		    `Left (`HSquash (`MinWidth (
			20,
			`Password (`id ("NUPass"), _("NU Password"), YEPData::GetCredentials("NUPass"))
		    ))),
		    `VSpacing (1),
		    `PushButton (`id ("test_NU_credentials"), _("Test...")),
		    `VStretch()
		)),
		`HStretch()
	    );
    }

    term ScheduledDownloadsDialogContent () {
	return `VBox (
	    `VStretch(),
	    `HBox (
		`HStretch(),
		`Label (_("FIXME: ... ")),
		`HStretch()
	    ),
	    `VStretch()
	);
    }

    symbol ReadDialog() {
	Wizard::RestoreHelp(HELPS["read"]:"");
	Wizard::SetTitleIcon("yast");

	YEPData::ReadCredentials();

	return `next;
    }

    symbol WriteDialog() {
	Wizard::RestoreHelp(HELPS["write"]:"");
	Wizard::SetTitleIcon("yast");

	YEPData::WriteCredentials();

	return `next;
    }

    void InitCredentialsDialog (string id) {
	return nil;
    }

    void StoreCredentialsDialog (string id, map event) {
	foreach (string one_entry, ["NUUrl", "NUUser", "NUPass"], {
	    YEPData::SetCredentials (one_entry, (string) UI::QueryWidget (`id (one_entry), `Value));
	});
    }

    boolean TestCredentials () {
	UI::OpenDialog (`MinSize (52, 12, `VBox (
	    `LogView (`id ("test_log"), _("&Details"), 5, 100),
	    `VSpacing (1),
	    `PushButton (`id (`ok), Label::OKButton())
	)));

	// complex.ycp
	boolean ret = CredentialsTest ("test_log");

	if (ret == true) {
	    UI::ChangeWidget (`id ("test_log"), `LastLine, "\n" + _("Test result: success") + "\n");
	} else {
	    UI::ChangeWidget (`id ("test_log"), `LastLine, "\n" + _("Test result: failed") + "\n");
	}

	UI::UserInput();
	UI::CloseDialog();

	return ret;
    }

    symbol HandleCredentialsDialog (string id, map event) {
	any action = event["ID"]:nil;

	if (action == "test_NU_credentials") {
	    StoreCredentialsDialog (id, event);
	    TestCredentials();
	}

	return nil;
    }

    void InitScheduledDownloadsDialog (string id) {
	return nil;
    }

    symbol HandleScheduledDownloadsDialog (string id, map event) {
	any action = event["ID"]:nil;

	return nil;
    }

    void StoreScheduledDownloadsDialog (string id, map event) {
	return nil;
    }

    boolean ReallyExit () {
	// yes-no popup
	return Popup::YesNo (_("Really exit?
All changes will be lost."));
    }
}
