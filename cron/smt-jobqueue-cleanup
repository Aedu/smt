#!/usr/bin/perl

###############################################################################
## Copyright (c)  2009 SUSE LINUX Products GmbH, Nuernberg, Germany.
###############################################################################

use strict;
use warnings;
use SMT::Utils;

use Data::Dumper;


if( ! SMT::Utils::dropPrivileges() )
{
    print STDERR __("Unable to drop privileges. Abort!\n");
    exit 1;
}

my $vblevel = LOG_ERROR|LOG_WARN|LOG_INFO1;
my $logfile = "/var/log/smt/smt-jobqueuecleanup.log";
my $LOG = SMT::Utils::openLog($logfile);

# read smt config
my $cfg = undef;
eval {  $cfg = SMT::Utils::getSMTConfig();  };
if( $@ || ! defined $cfg )
{
    SMT::Utils::printLog($LOG, $vblevel, LOG_ERROR, sprintf(__("Cannot read the SMT configuration file: %s"), $@));
    die( __("Cannot read the SMT configuration file: %s"));
}

# connect to database
my $dbh = undef;
$dbh = SMT::Utils::db_connect();
if( ! $dbh )
{
    SMT::Utils::printLog($LOG, $vblevel, LOG_ERROR, __("Cannot connect to database"));
    die( __("Cannot connect to database"));
}

my $res = undef;
###############################################################################
# Cleanup JobQueue

SMT::Utils::printLog($LOG, $vblevel, LOG_INFO1,  "Starting daily SMT JobQueue cleanup" , 0, 1 );
my $maxDays = $cfg->val('JOBQUEUE', 'maxFinishedJobAge') || 8;


# delete old finished jobs (first)
my $delOldJobsSQL = " DELETE FROM JobQueue where DATE_ADD(FINISHED, INTERVAL $maxDays DAY) < NOW() AND PERSISTENT = 0 ";
$res = $dbh->do($delOldJobsSQL);
SMT::Utils::printLog($LOG, $vblevel, LOG_INFO1,  sprintf("Number of deleted finished jobs: %s", ($res =~ /^0E0$/) ? "0":$res) , 0, 1 );



# delete job cookies (second)
my $delOldJobCookiesSQL = " DELETE FROM JobQueue where TYPE = 0 and DATE_ADD(CREATED, INTERVAL 1 DAY) < NOW() ";
$res = $dbh->do($delOldJobCookiesSQL);
SMT::Utils::printLog($LOG, $vblevel, LOG_INFO1,  sprintf("Number of deleted job cookies: %s", ($res =~ /^0E0$/) ? "0":$res) , 0, 1 );


# check for unsupported job types (third)
my $delUnsupportedJobsSQL = " DELETE FROM JobQueue where TYPE >= 9 ";
$res = $dbh->do($delUnsupportedJobsSQL);
SMT::Utils::printLog($LOG, $vblevel, LOG_INFO1,  sprintf("Number of deleted unsupported jobs: %s", ($res =~ /^0E0$/) ? "0":$res) , 0, 1 );



# check parents (fourth)
my $getParentDataSQL = " SELECT ID, GUID_ID, PARENT_ID from JobQueue where PARENT_ID IS NOT NULL AND DATE_ADD(CREATED, INTERVAL 1 DAY) < NOW() ";
my $pData = $dbh->selectall_hashref($getParentDataSQL, "ID" );
my @delBrokenParentsWhere = ();

foreach my $jid ( keys %{$pData} )
{
     if ( defined ${$pData}{$jid}{PARENT_ID} )
     {
         if ( not exists ${$pData}{ ${$pData}{$jid}{PARENT_ID} } )
         {
             push(@delBrokenParentsWhere, " ( ID = $jid AND GUID_ID = ${$pData}{$jid}{GUID_ID} ) ");
         }
     }
}

my $whereStr = '';
$whereStr = join(" OR ", @delBrokenParentsWhere );

if ( defined $whereStr && $whereStr ne '' )
{
    my $delBrokenParentsSQL = " DELETE FROM JobQueue where $whereStr" ;
    $res = $dbh->do($delBrokenParentsSQL);
    SMT::Utils::printLog($LOG, $vblevel, LOG_INFO1,  sprintf("Number of deleted jobs with broken parent IDs: %s", ($res =~ /^0E0$/) ? "0":$res) , 0, 1 );
}
else
{
    SMT::Utils::printLog($LOG, $vblevel, LOG_INFO1,  "Number of deleted jobs with broken parent IDs is: 0" , 0, 1 );
}


# check persistent jobs for proper timelag [> 1 minute] (last)
my $getTooPersistentJobs = " SELECT j.ID, c.GUID, j.TIMELAG from JobQueue j LEFT JOIN Clients c ON (j.GUID_ID = c.ID) where j.PERSISTENT = 1 AND j.TIMELAG < '00:01:00'  ";
my $persData = $dbh->selectall_hashref($getTooPersistentJobs, "ID" );

my $numPersData = keys %{$persData} || 0;
if ( $numPersData > 0 )
{
    SMT::Utils::printLog($LOG, $vblevel, LOG_INFO1,  sprintf("Number persistent jobs with a timelag smaller than 1 minute: %s", $numPersData ) ,0 ,1 );

    foreach my $jid ( keys %{$persData} )
    {
        SMT::Utils::printLog($LOG, $vblevel, LOG_INFO1,  "Job ID ($jid) for GUID (${$persData}{$jid}{GUID}) has a timelag of (${$persData}{$jid}{TIMELAG})." , 1 ,1);
    }
    SMT::Utils::printLog($LOG, $vblevel, LOG_INFO1,  "This is just a warning. If the timelag for these jobs is not intended to be so small please change the jobs using the smt-job command." , 1 ,1);
}
else
{
    SMT::Utils::printLog($LOG, $vblevel, LOG_INFO1,  "No persistent jobs with a timelag smaller than 1 minute found. Good." ,0 ,1 );
}

