
TODO:
=====

{
  - verify checksum of /repodata/repomd.xml

  - Do we need to provide a keyring and accept new keys? 
    Talk to security-team about this.

  Talked to security-team: This is nice to have but no requirement
  because the client are checking the repomd too.
}

- client tool for setting/initializing the "Mirrorable" flag
  in the Catalogs table:
  * update Catalogs SET Mirrorable='N'
  * download repo/repoindex.xml, parse it and set the
    available catalogs to 'Y' again.
  * try to access repomd.xml of all YUM catalogs and set
    the "Mirroable" flags to 'Y' again

- client tool to view all mirrorable catalogs and change the
  "DoMirror" Flag on demand.

- client tool to view :
  * the registrations
  * used products

- YEP Add-On Product (server)
  * someone needs to build and sign the add-on periodically
  * add-on contains all server RPMs
  * new packages (e.g.) skelcd-control-YEP and skelcd-YEP
    (internal ones, for building the add-on)
  * ... (maybe to be discussed with POS team)

- write yast module for initial setup
  * start database initialization (ncc-mirror) at the end
    of the YaST run.
  * NiceToHave: configuration of a cronjob for yep-mirror.pl

- yup has a hardlink feature. Would be nice if we could have it too.
  It searches for same files (SLES <=> SLED as example) and
  create a hardlink to safe some disk space.

- add a logfile option to yep-mirror.pl and prepare the YEP::Mirror::... 
  modules to print in a logfile

- YEP::Registration listparam has to check for "accept=''" option

- yep.db must be owned by user "wwwrun"
  Found out that sqlite must have write access to the directory too.
  We should think about to move the DB to /var/lib/wwwrun/

- test what happens if two processes what to write yep.db
  How can we solve concutrrent access with DBI?

- call verify (yep-mirror.pl) after syncing a repo and restart syncing 
  if verify failed (e.g. 3 times before stopping)

DONE:
=====

- support HTTPS - the suse_register will only connect via https

- yast module
  * credentials and their testing
  * adjusting /etc/sysconfig/apache2
  * reloading apache2 when configuration changed
  * insserving apache2 if needed


Ideas:
======
- provide test and production enviroment. 
  A restricted area to test patches and if tests are ok move them
  to production so that they can used by everyone.
  * register the testing enviroment can be done by providing a special
    URL parameter. Such a parameter can be configured on the clients in
    /etc/suseRegister.conf 

